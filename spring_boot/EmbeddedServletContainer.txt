EmbeddedServletContainer

SpringBoot的Web容器是通过META-INF/spring.factories注入了EmbeddedServletContainerAutoConfiguration来自动装配的。
以tomcat为例，这里判断如果存在Tomcat等类，就会注入TomcatEmbeddedServletContainerFactory，

@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)
@Configuration
@ConditionalOnWebApplication
@Import(EmbeddedServletContainerCustomizerBeanPostProcessorRegistrar.class)
public class EmbeddedServletContainerAutoConfiguration {
    @Configuration
    @ConditionalOnClass({ Servlet.class, Tomcat.class })
    @ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)
    public static class EmbeddedTomcat {
        @Bean
        public TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {
            return new TomcatEmbeddedServletContainerFactory();
        }
    }
}

TomcatEmbeddedServletContainerFactory实现了EmbeddedServletContainerFactory

public interface EmbeddedServletContainerFactory {
    EmbeddedServletContainer getEmbeddedServletContainer(ServletContextInitializer... initializers);
}

初始化Tomcat并根据ServletContextInitializer对servletContext进行初始化。

public EmbeddedServletContainer getEmbeddedServletContainer(ServletContextInitializer... initializers) {
    Tomcat tomcat = new Tomcat();
    File baseDir = (this.baseDirectory != null ? this.baseDirectory
            : createTempDir("tomcat"));
    tomcat.setBaseDir(baseDir.getAbsolutePath());
    Connector connector = new Connector(this.protocol);
    tomcat.getService().addConnector(connector);
    customizeConnector(connector);
    tomcat.setConnector(connector);
    tomcat.getHost().setAutoDeploy(false);
    tomcat.getEngine().setBackgroundProcessorDelay(-1);
    for (Connector additionalConnector : this.additionalTomcatConnectors) {
        tomcat.getService().addConnector(additionalConnector);
    }
    prepareContext(tomcat.getHost(), initializers);
    return getTomcatEmbeddedServletContainer(tomcat);
}

EmbeddedServletContainer是具体的Web容器，提供http的服务。

实例:

通过在application.properties设置对应的key-value对，可以配置Spring Boot应用程序的很多特性，例如POST、SSL、MySQL等等。如果需要更加复杂的调优，则可以利用Spring Boot提供的EmbeddedServletContainerCustomizer接口通过编程方式和修改配置信息。

尽管可以通过application.properties设置server.session-timeout属性来配置服务器的会话超时时间，这里我们用EmbeddedServletContainerCustomizer接口修改，来说明该接口的用法。

@Bean
public static EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer() {
    return new EmbeddedServletContainerCustomizer() {
        @Override
        public void customize(ConfigurableEmbeddedServletContainer container) {

            container.setSessionTimeout(1, TimeUnit.MINUTES);

            if (container instanceof TomcatEmbeddedServletContainerFactory) {
                TomcatEmbeddedServletContainerFactory factory = TomcatEmbeddedServletContainerFactory.class.cast(container);

                factory.addContextCustomizers(new TomcatContextCustomizer() {
                    @Override
                    public void customize(Context context) {
                        context.setPath("/spring-boot");
                    }
                });

                factory.addConnectorCustomizers(new TomcatConnectorCustomizer() {
                    @Override
                    public void customize(Connector connector) {
                        connector.setPort(8888);
                        connector.setProtocol(Http11Nio2Protocol.class.getName());
                    }
                });
            }
        }
    };
}

ServletContextInitializer:
interface ServletContextInitializer {}
    Configure the given ServletContext with any servlets, filters, listeners context-params and attributes necessary for initialization.

    void onStartup(ServletContext servletContext) throws ServletException;