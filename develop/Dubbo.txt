采用SOA架构，使用Zookeeper作为注册中心，子系统之间通过Dubbo通信、调用服务；

	服务层和表现层是不同的工程，所以需要系统之间的通信。
		注意：pojo类都要实现序列化接口，因为要在网络中传输！

	使用dubbo
		rpc(远程过程调用,直接调用方法)协议进行远程调用，使用socket通信。
		传输效率高，并且可以统计出系统之间的调用关系、调用次数。

	dubbo：分布式服务架构的治理系统，用来进行资源调度，使得所有的服务有统一的入口
		五部分组成：
			Provider: 暴露服务的服务提供方。
			Consumer: 调用远程服务的服务消费方。
			Registry: 服务注册与发现的注册中心。
			Monitor: 统计服务的调用次调和调用时间的监控中心。
			Container: 服务运行容器。

		原理：
			0. 容器负责启动，加载，运行服务提供者。
			1. 服务提供者在启动时，向注册中心注册自己提供的服务。
			2. 服务消费者在启动时，向注册中心订阅自己所需的服务。
			3. 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。
			4. 服务消费者，从提供者地址列表中基于软负载均衡算法，选一台提供者调用，如果调用失败，再选另一台。
			5. 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。

	zookeeper: 是dubbo中的注册中心（适合做集群管理中心）奇数个节点
		注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力较小

Dubbo架构的主要质量属性
	1、连通性
		①注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力较小。
		②监控中心服务统计各服务调用次数、调用时间等，统计先在内存汇总后每一分钟发送到监控中心服务器，并以报表展示。
		③服务消费者向注册中心获取服务提供者地址列表，并根据负载算法直接调用提供者 ，同事汇报调用时间到监控中心。
		④注册中心、服务提供者、服务消费者三者之间均为长连接，监控中心除外。
		⑤注册中心通过长连接感知服务提供者的存在，服务提供者宕机，注册中心将立即推送事件通知消费者。
		⑥注册中心和监控中心全部宕机，不影响已运行的提供者和消费者，消费者在本地缓存了提供者列表。
		⑦注册中心和监控中心都是可选的，服务消费者可以直连服务提供者。

	2、健壮性
		①监控中心宕机不影响使用，只是丢失部分采样数据。
		②数据库宕机后，注册中心仍能通过缓存提供服务列表查询，但不能注册新的服务。
		③注册中心对等集群，任意一台宕机后，将自动切换到另一台。
		④注册中心全部宕机后，服务提供者和服务消费者仍能通过本地缓存通信。
		⑥服务提供者无状态，任意一台宕机后不影响使用。
		⑦服务提供者全部宕机后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复。

dubbo:

接口 | 接口实现类 | controller

1. 声明服务接口, 所有的服务接口都单独打包放在一个项目中
2. 服务提供者开发, 实现服务接口
3. 服务提供者配置, 发布服务
4. 服务消费者配置, 引用服务
5. 服务调用

1. 在服务消费者和提供者两个module分别引用jar
<dependency>
    <groupId>com.alibaba</groupId>
    <artifactId>dubbo</artifactId>
    <version>2.4.9</version>
    <exclusions>
        <exclusion>
            <groupId>org.springframework</groupId>
            <artifactId>spring</artifactId>
        </exclusion>
    </exclusions>
</dependency>
<dependency>
    <groupId>com.101tec</groupId>
    <artifactId>zkclient</artifactId>
    <version>0.8</version>
    <exclusions>
        <exclusion>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
        </exclusion>
    </exclusions>
</dependency>

2.
consumer.xml
    消费方应用信息, 用于计算依赖关系
    <dubbo:application name="bookshop-admin"/>
    使用zookeeper注册中心暴露服务地址
	<dubbo:registry protocol="zookeeper" address="127.0.0.1:2181"></dubbo:registry>
	生成远程服务代理, 可以和本地bean一样使用service
	<dubbo:reference id="bookService" interface="com.lesson.service.BookService" version="1.0" group="hds"></dubbo:reference>

provider.xml
    提供方应用信息, 用于计算依赖关系
    <dubbo:application name="bookshop-provider"/>
    使用zookeeper注册中心暴露服务地址
    <dubbo:registry protocol="zookeeper" address="127.0.0.1:2181"></dubbo:registry>
    声明需要暴露的服务接口
    <dubbo:service interface="com.lesson.service.BookService" ref="bookServiceImpl" version="1.0" group="hds"></dubbo:service>

3.
./zkServer.sh start

4. 实体类需要实现序列化接口