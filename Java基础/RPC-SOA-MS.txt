DDD: 
	领域驱动设计(为每个需求归类, 找到其核心的领域, 然后设计模型, 领域模型就是核心)
灰度发布: 
	在其上可以进行A/B testing，即让一部分用户继续用产品特性A，一部分用户开始用产品特性B，如果用户对B没有什么反对意见，那么逐步扩大范围，把所有用户都迁移到B上面来。
A/B test: 
	为Web或App界面或流程制作两个（A/B）或多个（A/B/n）版本，在同一时间维度，分别让组成成分相同（相似）的访客群组随机的访问这些版本，收集各群组的用户体验数据和业务数据，最后分析评估出最好版本正式采用。

元编程:
	关于某事自身的某事。
	meta-data 就是「关于数据的数据」meta-programming 也是由此而来，是「关于编程的编程」
	「我的电话是 +86 123 4567 8910」
	这是一条数据；
	「+86 123 4567 8910 
	有十三个数字和一个字符，前两位是国家代码，后面是一个移动电话号码」   —— 这是关于前面那条数据的数据。

	编写能改变语言语法特性或者运行时特性的程序 | 可以扩展程序自身，这样的能力，为元编程。
	一般代码的操作对象是数据, 元编程操作的对象是其他代码

	在Java编程语言中，元编程是一种新型的编程模式，目的是减少代码行数，得到事半功倍的效果。

	注解驱动（Annotation-Driven）
	反射驱动（Reflection-Driven）
	表达式驱动（Expression-Driven）
	Lambda（Java 8 Introduced）
	Script On JVM（Groovy、JavaScript等）

微服务和SOA:
	SOA面向服务的架构, 任何资源都是一个服务
	webservice是SOA的一种, dubbo也是SOA的实现

	微服务是SOA的一个变种. 相比于SOA更加精细，微服务更多的以独立的进程的方式存在，互相之间并无影响；业务场景耦合更低
	微服务提供的接口方式更加通用化，例如HTTP RESTful方式，各种终端都可以调用，无关语言、平台限制；通信协议更轻量级(rest代替webservice(都是http协议, 但从xml变成json))
	微服务更倾向于分布式去中心化的部署方式，没有ESB的星型结构, 在互联网业务场景下更适合；
	微服务是一种软件架构, 和语言无关.
	微服务更需要开发运维体系(专门有一个springboot项目是做这个的, DevOps)
	微服务的服务架构和通信协议都更轻量

	rest本质是http协议, 是文本协议, 是语言无关的 

分层结构在不同领域的表述:
	代码结构: 分层
	工程结构: 模块化
	系统层面: 服务拆分(SOA也提出了服务拆分, 不是微服务提出的)

事件驱动模型(EDA): 是一种异步的调用方式
RPC: 是同步的调用方式
同步和异步的区别在于是否要及时响应

The 12-Factor App
	1. Codebase
	2. Dependencies (maven gradle 动态链接库 jvm...)
	3. Config (外部配置如启动参数, 内部配置如代码可以修改的配置)
	4. Backing service
	5. Build release run
	6. Process (分布式属于进程间调用)
	7. Port binding (端口绑定)
	8. Concurrnecy
	9. Disposability
	10. Dev/prod parity
	11. Logs
	12. Admin processes

RPC:
	1. 接口调用通常包含两个部分，序列化和通信协议。常见的序列化协议包括json、xml、hession、protobuf、thrift、text、bytes等；通信比较流行的是http、soap、websockect.
	2. RPC: 远程方法调用, 就是像调用本地方法一样调用远程方法, 通信协议大多采用二进制方式. 通常基于TCP实现，常用框架例如dubbo(在生产者和消费者两个微服务之间的通信采用的就是Rpc)，netty、mina、thrift. 底层使用Socket接口，定义了一套远程调用方法；
		RPC的思想是把本地函数映射到API，也就是说一个API对应的是一个function，我本地有一个getAllUsers，远程也能通过某种约定的协议来调用这个getAllUsers。至于这个协议是Socket、是HTTP还是别的什么并不重要； RPC中的主体都是动作，是个动词，表示我要做什么。

	3. Rest：严格意义上说接口很规范，操作对象即为资源，对资源的四种操作（post、get、put、delete），并且参数都放在URL上, 常见的http api都可以称为Rest接口。HTTP是建立在TCP上，不是使用Socket接口，需要连接方主动发数据给服务器，服务器无法主动发数据个客户端；

	使用场景:
		1. RPC效率高, 响应时间短. 在一个框架内部的多系统之间, 采用RPC, 性能更好.
		2. Rest更规范, 更标准, 通用. 无论哪种语言都支持http协议, 所以SDK等开源中间件都会支持RestFul
		3. Rest接口更加灵活，如果使用RPC则会有很多约束. 内部都是采用性能更高的RPC方式。而对外开放的才是RESTful。

RPC在微服务中的应用:
	1、 RPC框架是架构微服务化的首要基础组件 ，它能大大降低架构微服务化的成本，提高调用方与服务提供方的研发效率，屏蔽跨进程调用函数（服务）的各类复杂细节.
	2、 RPC框架的职责是：让调用方感觉就像调用本地函数一样调用远端函数、让服务提供方感觉就像实现一个本地函数一样来实现服务
	3. 如果没有统一的RPC框架，各个团队的服务提供方就需要各自实现一套序列化、反序列化、网络框架、连接池、收发线程、超时处理、状态机等“业务之外”的重复技术劳动，造成整体的低效。所以，统一RPC框架把上述“业务之外”的技术劳动统一处理，是服务化首要解决的问题.

RPC的过程:
	决定rpc性能的关键在于序列化的速度, 可以采用avro, thrift等开源序列化框架实现序列化

	1）服务消费方（client）调用以本地调用方式调用服务；
	2）client stub接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体；
	3）client stub找到服务地址，并将消息发送到服务端；
	4）server stub收到消息后进行解码；
	5）server stub根据解码结果调用本地的服务；
	6）本地服务执行并将结果返回给server stub；
	7）server stub将返回结果打包成消息并发送至消费方；
	8）client stub接收到消息，并进行解码；
	9）服务消费方得到最终结果。

	怎么封装通信细节才能让用户像以本地调用方式调用远程服务呢？对java来说就是使用代理！java代理有两种方式：1） jdk 动态代理；2）字节码生成。尽管字节码生成方式实现的代理更为强大和高效，但代码不易维护，大部分公司实现RPC框架时还是选择动态代理方式。

	我们需要实现RPCProxyClient代理类，代理类的invoke方法中封装了与远端服务通信的细节，消费方首先从RPCProxyClient获得服务提供方的接口，当执行helloWorldService.sayHello(“test”)方法时就会调用invoke方法。

	确定消息数据结构
		1）接口名称
		2）方法名
		3）参数类型&参数值
		4）超时时间
		5）requestID，标识唯一请求id
		同理服务端返回的消息结构一般包括以下内容。
			1）返回值
			2）状态code
			3）requestID
	序列化
		通用性, 性能, 可扩展性protobuf
	通信
		消息数据结构被序列化为二进制串后，下一步就要进行网络通信了。目前有两种IO通信模型：1）BIO；2）NIO。一般RPC框架需要支持这两种IO模型，

	1）client线程每次通过socket调用一次远程接口前，生成一个唯一的ID，即requestID（requestID必需保证在一个Socket连接里面是唯一的），一般常常使用AtomicLong从0开始累计数字生成唯一ID；

	2）将处理结果的回调对象callback，存放到全局ConcurrentHashMap里面put(requestID, callback)；

	3）当线程调用channel.writeAndFlush()发送消息后，紧接着执行callback的get()方法试图获取远程返回的结果。在get()内部，则使用synchronized获取回调对象callback的锁，再先检测是否已经获取到结果，如果没有，然后调用callback的wait()方法，释放callback上的锁，让当前线程处于等待状态。

	4）服务端接收到请求并处理后，将response结果（此结果中包含了前面的requestID）发送给客户端，客户端socket连接上专门监听消息的线程收到消息，分析结果，取到requestID，再从前面的ConcurrentHashMap里面get(requestID)，从而找到callback对象，再用synchronized获取callback上的锁，将方法调用结果设置到callback对象里，再调用callback.notifyAll()唤醒前面处于等待状态的线程。

	zookeeper可以充当一个服务注册表（Service Registry），让多个服务提供者形成一个集群，让服务消费者通过服务注册表获取具体的服务访问地址（ip+端口）去访问具体的服务提供者。

	zookeeper提供了“心跳检测”功能，它会定时向各个服务提供者发送一个请求（实际上建立的是一个 socket 长连接），如果长期没有响应，服务中心就认为该服务提供者已经“挂了”，并将其剔除，

	更为重要的是zookeeper 与生俱来的容错容灾能力（比如leader选举），可以确保服务注册表的高可用性。

RESTful: 是rpc的一种
    查询 /user/query?name=tom         GET         /user?name=tome     GET
    详情 /user/getInfo?id=1           GET         /user/1             GET
    创建 /user/create?name=tome       POST        /user               POST
    修改 /user/update?id=1&name=jerry POST        /user/1             PUT
    删除 /user/delete?id=1            GET         /user/1             DELETE

    1.用url描述资源
    2.用HTTP方法描述行为，使用HTTP状态码表示不同的结果
    3.用json交互数据
    4.只是一种风格，不是强制的标准

	不是所有的方法都适合用restful接口
		因为要把所有的controller方法的参数都写在url中, 这时候如果参数不全部传, 会造成表意不明, 无法映射到某一个确定的方法

RPC和Rest的区别:
	以Apache Thrift为代表的二进制RPC，支持多种语言（但不是所有语言），四层通讯协议，性能高，节省带宽。相对Restful协议，使用Thrifpt RPC，在同等硬件条件下，带宽使用率仅为前者的20%，性能却提升一个数量级。但是这种协议最大的问题在于，无法穿透防火墙。

	以Spring Cloud为代表所支持的Restful 协议，优势在于能够穿透防火墙，使用方便，语言无关，基本上可以使用各种开发语言实现的系统，都可以接受Restful 的请求。 但性能和带宽占用上有劣势。

	所以，业内对微服务的实现，基本是确定一个组织边界，在该边界内，使用RPC; 边界外，使用Restful。这个边界，可以是业务、部门，甚至是全公司。

restful（restful是一种设计风格）
rpc(一种标准，屏蔽通信细节，直接调用)