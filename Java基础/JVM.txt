jdk(java开发工具集) > jre(java运行环境) > jvm(java虚拟机)

jdk比jre多了javac等工具
jvm + javaseAPI => jre

JRE： Java Runtime Environment
JDK：Java Development Kit 
JRE顾名思义是java运行时环境，包含了java虚拟机，java基础类库。是使用java语言编写的程序运行所需要的软件环境，是提供给想运行java程序的用户使用的。
JDK顾名思义是java开发工具包，是程序员使用java语言编写java程序所需的开发工具包，是提供给程序员使用的。JDK包含了JRE，同时还包含了编译java源码的编译器javac，还包含了很多java程序调试和分析的工具：jconsole，jvisualvm等工具软件，还包含了java程序编写所需的文档和demo例子程序。
如果你需要运行java程序，只需安装JRE就可以了。如果你需要编写java程序，需要安装JDK。

==============================================================================

模拟堆内存溢出的代码:
    public static void main(String[] args) {
        List<Demo> demos = new ArrayList<>();
        while (true) {
            demos.add(new Demo());
        }
    }

    static class Demo {
    }

Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
通过设置虚拟机参数:
-XX:+HeapDumpOnOutOfMemoryError -Xms20m(堆最小容量) -Xmx20m(堆最大容量)
可以生成一个堆内存的快照文件, 导入到eclipse memory analyzer中查看(文件 -> open snapshot即可 -> 打开树形结构加载堆内存的树信息 -> shallow heap(对象本身所占用的内存大小), retained heap(对象加上对象直接或者间接引用的对象所占用的内存大小的和))

==============================================================================

类加载器:

虚拟机把描述类的数据从Class文件加载到内存, 并对数据进行校验, 解析和初始化, 最终形成可以被虚拟机直接使用的Java类型, 这就是虚拟机的类加载机制.

是一种懒加载的策略. 
我们可以自己实现类加载器, 加载那些从网络上获取到的Class文件

类加载时机: (类的初始化)
1. 遇到new getstatic putstatic invokestatic这四条字节码指令, 如果类没有进行过初始化, 则需要先初始化.
    具体场景是: new实例化对象, 读取或者设置一个类的警惕字段(注意: 被final修饰, 已经在编译器把结果放入常量池的静态字段除外)的时候, 以及调用一个类的静态方法的时候.
2. 使用java.lang.reflect包的方法对类进行反射调用的时候, 会对类初始化.
3. 当初始化一个类的时候, 如果发现父类还没进行初始化, 则先触发其父类的初始化.
4. 当虚拟机启动时 用户需要指定一个要执行的主类(包含main方法), 虚拟机会先初始化这个主类.

不被初始化的例子:
    1. 通过子类引用父类的静态字段, 子类不会被初始化.
    2. 通过数组定义来引用类, 该类不会被初始化
    3. 调用类的常量, 该类不会被初始化

类加载的过程:
    加载 -> 验证 -> 准备 -> 解析 -> 初始化
    其中, 验证/准备/解析都属于"连接"

    注意: 加载和连接不是串行执行的, 而是有交错的执行.

加载:
    1. 通过一个类的全限定类名来获取定义此类的二进制流(.class文件)
        加载源:
            1. 文件
                .class文件
                jar文件
            2. 网络
            3. 计算生成的二进制流
                $Proxy
            4. 由其他文件生成
                jsp文件
            5. 数据库
    2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构
        类似于将spring中的xml文件, 转换为IOC容器中的Bean
    3. 在内存中生成一个代表这个类的Class对象, 作为这个类的各种数据的访问入口
        一般来说, 会把Class对象放在堆内存中
        但HotSpot虚拟机将Class对象放在了方法区中.

验证:
    验证是连接的第一步, 为了确保.class文件字节流中包含的信息符合当前虚拟机的要求, 并且不会危害虚拟机的安全
        文件格式(以魔数开头等)
        元数据(任何类都有父类, 除了Object, 是否继承了被final修饰的类)
        字节码(执行流, 顺序循环选择, 确定程序的语义)
        符号引用(是否有某个全限定类名指向的类, 确保解析可以正常进行)

准备:
    正式为类变量(也就是被static修饰的变量)分配内存, 并设置变量的初始值(并非我们指定的值如public static int a = 10; 而是该类型的默认值, 比如int是0, boolean是false, char是'0', float是0.0)(但如果被static final修饰, 则常量的指定值会一同指定).
    这些变量使用的内存, 都会在方法区中进行分配.

解析:
    虚拟机将常量池中的符号引用, 替换为直接引用(具体的内存地址)的过程.
        类或接口的解析
        字段解析
        类方法解析
        接口方法解析

初始化:
    执行<clinit>()方法的过程 -- 初始化类或接口
    例子:
        public class Demo {
            static {
                i = 0;
                sout(i); //在这里编译报错
            }

            static int i = 1;
        }
        - <clinit>()方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块中的语句合并产生的. 收集顺序由语句块在源文件中的顺序决定. 静态语句块只能访问定义在静态语句块之前的变量. 对定义在它之后的变量, 在前面的语句块中可以赋值, 但不能访问.
        - 子类的<clinit>()方法在执行之前, 虚拟机确保父类的先执行完毕
        - 接口中的变量赋值, 也会生成<clinit>()方法, 但不需要先执行父接口的<clinit>()方法, 只有父接口中定义的变量被使用才会初始化.
        - 如果多个线程同时初始化一个类, 只有一个线程会执行这个类的<clinit>()方法, 其他线程会阻塞.

只有被同一个类加载器加载的类才会相等.(Class对象)

启动类加载器:
    C++实现, 是虚拟机的一部分, 加载Java_Home中lib下的类
扩展类加载器:
    加载Java_Home中lib/ext下的类
应用程序类加载器(系统类加载器)
    加载用户类路径上所指定的类库
自定义类加载器
    定义一个类, 继承ClassLoader
    重写loadClass方法
    实例化Class对象

双亲委派模型:
    abstract ClassLoader#loadClass, java1.2之后才有

关于ClassLoader的两个方法:

    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
    while (true) {
        System.out.println(classLoader.getClass().getName());
        classLoader = classLoader.getParent();
        if (classLoader == null) {
            break;
        }
    }
    ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();
    System.out.println(systemClassLoader.getClass().getName());

    -------------------------------------------
   
    public class ServletContextListenerImpl implements ServletContextListener {
        @Override
        public void contextInitialized(ServletContextEvent sce) {
            ServletContext sc = sce.getServletContext();
            ClassLoader classLoader = sc.getClassLoader();
            while (true) {
                System.out.println(classLoader.getClass().getName());
                classLoader = classLoader.getParent();
                if (classLoader == null) {
                    break;
                }
            }
        }

        @Override
        public void contextDestroyed(ServletContextEvent sce) {
        }
    }