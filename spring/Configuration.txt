springboot的配置:

1. springboot默认的全局配置文件在application.properties或application.yml（推荐使用）。此文件默认可以放在classpath路径，或者放在classpath:/config，springboot应用都是默认读取到的。

local.ip=192.168.1.111

@SpringBootApplication
public class Application {
    public static void main(String[] args) {
        ConfigurableApplicationContext context = SpringApplication.run(Application.class, args);
        System.out.println(context.getEnvironment().getProperty("local.ip"));
        context.close();
    }
}

2. 使用 Environment 类或者 @Value 注解获取配置

@Component
public class UserConfig {
    @Autowired
    private Environment environment;

    @Value("${local.name}")
    private String localName;

    //默认值
    @Value("${tomcat.port:10000}")
    private int port;

    public void show(){
        System.out.println(environment.getProperty("local.ip"));
        //重载方法，使得读取到的数据是Integer类型的
        System.out.println(environment.getProperty("local.port", Integer.class));
        System.out.println(localName);

        //在配置文件中引用引用已有的变量
        //local.url=http://${local.ip}:${local.port}
        System.out.println(environment.getProperty("local.url"));
    }
}

3. 设置默认值

@SpringBootApplication
public class Application {

    @Value("${server.host:localhost}")
    private String serverHost;

    public static void main(String[] args) {
        SpringApplication application = new SpringApplication(Application.class);
        
        Map<String,Object> defaultProperties = new HashMap<>();
        defaultProperties.put("server.host","192.168.1.111");
        defaultProperties.put("server.ip","8080");
        application.setDefaultProperties(defaultProperties);
        
        Properties defaultProperties2 = new Properties();
        defaultProperties2.put("server.ip","8080");
        application.setDefaultProperties(defaultProperties2);
        
        ConfigurableApplicationContext context = application.run(args);
        System.out.println(context.getBean(Application.class).serverHost);
        System.out.println(context.getEnvironment().getProperty("server.host"));
        System.out.println(context.getEnvironment().getProperty("server.ip"));
        context.close();
    }
}

4. 使用@ConfigurationProperties注解加载配置文件

注意：使用 @ConfigurationProperties，那么配置的属性必须要加get**,set **方法。

5. 加载外部文件的方式

@Configuration
@PropertySource({"classpath:jdbc.properties", "classpath:user.properties"})
@PropertySources({@PropertySource("classpath:jdbc.properties"),@PropertySource("classpath:user.properties")})
public class FileConfig {
}

@PropertySources注解容器式注解，将@PropertySource注解复合在一起使用。

然后再写一个FileConfig.java的配置类, 读取jdbc.properties中的属性