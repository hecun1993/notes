#### Websocket协议
- http协议, 客户端和服务端传递数据, 在同一时刻, 数据传递方向只能有一个, 要么发送数据, 要么接收数据.
- websocket协议, 在同一个连接, 同一个时刻, 可以既发送数据, 也接收数据. 
- websocket是一个长连接协议, 不需要每次传输数据前都建立连接. 所以延迟低, 而且不需要每次携带一些连接信息, 传递的数据少.

#### JavaWeb的请求过程
`把访问意图，包装成一个HTTP请求(request)，发给对应的服务器，或者用django, springboot开发的web程序。然后处理这个HTTP请求，返回相应的HTTP响应`

`建立连接，发送请求，返回响应，关闭连接`

#### HTTP&HTTPS
- http是超文本传输协议，信息是明文传输（如果攻击者截取了在浏览器和服务器之间的传输报文，就可以读懂其中的信息），是无状态的。
- https是由具有安全性的ssl加密传输协议和HTTP协议一同构建的，需要到CA申请证书来验证服务器的身份，因此可进行加密传输和身份认证。  
- http和https使用的端口不一样，前者是80，后者是443。

```
http请求建立在一次tcp连接的基础上
    一次tcp连接至少会产生一次或多次http请求
    http1: 一对一
    http1.1: 顺序一对多
    http2: 多路复用一对多
```

#### URL（统一资源定位符）和URI（统一资源标识符）
- URI可以分为URL（具有位置信息）和URN（统一资源命名符，具有名字）或同时具备locators和names特性。URN作用就好像一个人的名字，URL就像一个人的地址。
- 换句话说：URN确定了东西的身份，URL提供了找到它的方式。  
- URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。URL和URN都是URI的一种

### HTTP协议
- HTTP是超文本传输协议, 建立在TCP/IP协议基础上, 主要实现客户端与服务器端之间的通信
- 包含两类报文：请求报文和响应报文。
- HTTP请求报文: 由请求头, 请求行、空行和请求数据4个部分组成

#### 请求报文
1. 请求行 GET /index.html HTTP/1.1
```
* get方式不适合传输私密数据; 不适合传输大量数据; 
* 如果数据是英文字母/数字，原样发送;
* 如果是空格，转换为+;
* 如果是中文/其他字符，则直接把字符串用BASE64加密，得出如：%E4%BD%A0%E5%A5%BD; 其中％XX中的XX为该符号以16进制表示的ASCII。

* post方法将请求参数封装在HTTP请求数据中, 以名称/值的形式出现，可以传输大量数据，不会显示在URL中。
```

#### get和post的区别
- 不在于携带数据的多少, 那是浏览器厂商规定的.
- get是`幂等性`的, 从服务端获取数据, 无论获取多少次, 得到的结果是一样的
- post不是`幂等性`的. 向服务端提交数据, 目的是让服务端数据发生变化. `如果让服务端的数据产生变化, 那么就应该用post而不是get`

2. 请求头
- 请求头部由关键字/值对组成，每行一对.
- 关键字和值用英文冒号“:”分隔。请求头部通知服务器有关于客户端请求的信息
```
User-Agent：产生请求的浏览器类型。
Accept：客户端可识别的内容类型列表。
Host：请求的主机名，允许多个域名同处一个IP地址，即虚拟主机。
```

3. 空行
- 最后一个请求头之后是一个空行，发送回车符和换行符，通知服务器以下不再有请求头

4. 请求数据

#### 响应报文
```
1xx：指示信息--表示请求已接收，继续处理。
2xx：成功--表示请求已被成功接收、理解、接受。
3xx：重定向--要完成请求必须进行更进一步的操作。
4xx：客户端错误--请求有语法错误或请求无法实现。
5xx：服务器端错误--服务器未能实现合法的请求。
```