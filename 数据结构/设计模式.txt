单例设计模式：
	1. 只适合单线程环境(懒汉模式)
	public class Singleton {
		private static Singleton instance = null;
		private Singleton() {}

		public static Singleton getInstance(){
			if (instance == null) {
				instance = new Singleton();
			}
			return instance;
		}
	}

	Singleton的静态属性instance中，只有instance为null的时候才创建一个实例，构造函数私有，确保每次都只创建一个，避免重复创建。
	缺点：只在单线程的情况下正常运行，在多线程的情况下，就会出问题。例如：当两个线程同时运行到判断instance是否为空的if语句，并且instance确实没有创建好时，那么两个线程都会创建一个实例.

	2. 适合多线程环境（懒汉模式）
	public class Singleton {
		private static Singleton instance = null;
		private Singleton() {}

		public static synchronized Singleton getInstance(){
			if (instance == null) {
				instance = new Singleton();
			}
			return instance;
		}
	}

	加锁，但效率低。
	每次通过getInstance方法得到singleton实例的时候都有一个试图去获取同步锁的过程。

	3. 加同步锁，但位置更加合理
	public class Singleton {
		private static Singleton instance = null;
		private Singleton() {}

		public static Singleton getInstance(){
			if (instance == null) {
				synchronized(Singleton.class){
					if (instance == null) {
						instance = new Singleton();
					}
				}
			}
			return instance;
		}
	}

	4. 饿汉模式
	public class Singleton {
		private static Singleton instance = new Singleton();
		private Singleton() {}

		public static Singleton getInstance(){
			return instance;
		}
	}

	没有实现 lazy loading 的效果，从而降低内存的使用率。

	5. 静态内部类
	public class Singleton {
		private Singleton() {}

		private static class SingletonHolder {
			private final static Singleton instance = new Singleton();
		}

		public static Singleton getInstance() {
			return SingletonHolder.instance;
		}
	}


工厂模式
	包括三种类型：
	简单工厂模式：就是一个创建对象的工具类
		public class SimpleFactory {
			public Object create(Class clazz){
				if (clazz.getName().equals(Plane.class.getName())) {
					return createPlane();
				}
				return null;
			}
			private Plane createPlane() {
				return new Plane();
			}
		}
		public static void main(String[] args) {
			SimpleFactory s = new SimpleFactory();
			Plane plane = s.create(Plane.class);
		}
		//工厂帮你生产对象，这样你不用管生产的细节工作（也就是new对象的过程）
	
		class CarFactory{
            public static Car createCar(String carname){
				if("jili".equals(carname)){
				    return new Jili();
				}else if("qirui".equals(carname)){
				    return new Qirui();
				}else if("biyadi".equals(carname)){
				    return new Biyadi();
				}
        }
        这样，如果要再生产新品种的车，就要改工厂类的代码。所以要有后面的工厂方法模式。

	工厂方法模式:工厂方法模式定义了一个创建对象的接口，但由子类决定要实例化哪一个。工厂方法让类把实例化推迟到了子类。
		有一个大的工厂它就是 VehicleFactory，
		VehicleFactory工厂里又有很多生产车间，
		其中有一个就是 BroomFactory。
		我们的具体产品都是通过这些生产车间来负责生产的。
		
		Interface CarFactory{
            public static Car createCar();
         }

        class JiliFactory implements CarFactory{
            public static Car createCar(){
                return new Jili();
            }
        }
        class QiruiFactory implements CarFactory{
            public static Car createCar(){
                return new Qirui();
            }
        }
	
	抽象工厂模式：创建多个产品族的产品对象
		Interface CarFactory{
			public static PaoChe createPaoChe();
			public static YueyeChe createYueyeChe();
		}
		class JiliFactory implements CarFactory{
			public static PaoChe createPaoChe(){
			    return new JiliPaoChe();
			}
			public static YueyeChe createYueyeChe(){
			    return new JiliYueyeChe();
			}
		}
		class QiruiFactory implements CarFactory{
			public static PaoChe createPaoChe(){
			    return new QiruiPaoChe();
			}
			public static YueyeChe createYueyeChe(){
			    return new QiruiYueyeChe();
			}
		}

观察者模式：

	观察者模式是对象的行为模式，又叫发布-订阅(Publish/Subscribe)模式、模型-视图(Model/View)模式、源-监听器(Source/Listener)模式或从属者(Dependents)模式。
	一个软件系统常常要求在某一个对象的状态发生变化的时候，某些其他的对象做出相应的改变。做到这一点的设计方案有很多，但是为了使系统能够易于复用，应该选择低耦合度的设计方案。
	推模式：
	1.抽象主体角色类
	public abstract class Subject {
		//保存注册的观察者
		private List<Observer> list = new ArrayList<Observer>();

		//注册观察者
		public void attach(Observer observer){
			list.add(observer);
			System.out.print("Attached an observer");
		}

		//删除观察者
		public void detach(Observer observer){
			list.remove(observer);
		}

		//通知所有注册过的观察者
		public void notifyObservers(String newState){
			for(Observer observer : list){
				observer.update(newState);
			}
		}
	}
	2.具体主体角色类
	public class ConcreteSubject extends Subject {
		private String state;
		public String getState(){
			return state;
		}

		public void change(String newState){
			//状态改变
			state = newState;
			System.out.print("主题状态为：" + state);

			//状态改变，还需要通知各个观察者，把新状态当成参数传递。
			this.notifyObservers(state);
		}
	}
	3.抽象观察者角色
	public interface Observer {
		//更新状态
		public void update(String state);
	}
	4.具体观察者角色类
	public class ConcreteObserver implements Observer {
		//观察者的状态
		private String observerState;
		
		//更新观察者的状态使其与主题状态一致
		public void update(String state){
			observerState = state;
			System.out.print("观察者状态为：" + observerState);
		}
	}
	5.客户端main方法
	public class Client {
	    public static void main(String[] args) {
	        //创建主题对象
	        ConcreteSubject subject = new ConcreteSubject();
	        //创建观察者对象
	        Observer observer = new ConcreteObserver();
	        //将观察者对象登记到主题对象上
	        subject.attach(observer);
	        //改变主题对象的状态
	        subject.change("new state");
	    }
	}
	在运行时，这个客户端首先创建了具体主题类的实例，以及一个观察者对象。然后，它调用主题对象的attach()方法，将这个观察者对象向主题对象登记，也就是将它加入到主题对象的聚集中去。
	这时，客户端调用主题的change()方法，改变了主题对象的内部状态。主题对象在状态发生变化时，调用超类的notifyObservers()方法，通知所有登记过的观察者对象。

	在观察者模式中，又分为推模型和拉模型两种方式。
		推模型
			主题对象向观察者推送主题的详细信息，不管观察者是否需要，推送的信息通常是主题对象的全部或部分数据。
		拉模型
			主题对象在通知观察者的时候，只传递少量信息。如果观察者需要更具体的信息，由观察者主动到主题对象中获取，相当于是观察者从主题对象中拉数据。

	拉模式：
		
	在观察者的update方法中，会把主题对象自身通过update()方法传递给观察者，这样在观察者需要获取数据的时候，就可以通过这个引用来获取了。
	public interface Observer {
	    /**
	     * 更新接口
	     * @param subject 传入主题对象，方面获取相应的主题对象的状态
	     */
	    public void update(Subject subject);
	}
	public class ConcreteObserver implements Observer {
	    //观察者的状态
	    private String observerState;
	    
	    @Override
	    public void update(Subject subject) {
	        /**
	         * 更新观察者的状态，使其与目标的状态保持一致
	         */
	        observerState = ((ConcreteSubject)subject).getState();
	        System.out.println("观察者状态为："+observerState);
	    }
	}
	在抽象主题类的notifyObservers()方法中，传入的参数是this
	public abstract class Subject {
	    /**
	     * 用来保存注册的观察者对象
	     */
	    private List<Observer> list = new ArrayList<Observer>();
	    /**
	     * 注册观察者对象
	     * @param observer    观察者对象
	     */
	    public void attach(Observer observer){
	        
	        list.add(observer);
	        System.out.println("Attached an observer");
	    }
	    /**
	     * 删除观察者对象
	     * @param observer    观察者对象
	     */
	    public void detach(Observer observer){
	        
	        list.remove(observer);
	    }
	    /**
	     * 通知所有注册的观察者对象
	     */
	    public void nodifyObservers(){
	        for(Observer observer : list){
	            observer.update(this);
	        }
	    }
	}
	public class ConcreteSubject extends Subject{
	    private String state;
	    public String getState() {
	        return state;
	    }

	    public void change(String newState){
	        state = newState;
	        System.out.println("主题状态为：" + state);
	        //状态发生改变，通知各个观察者
	        this.nodifyObservers();
	    }
	}

	推模型是假定主题对象知道观察者需要的数据；
	而拉模型是主题对象不知道观察者具体需要什么数据，没有办法的情况下，干脆把自身传递给观察者，让观察者自己去按需要取值。

	推模型可能会使得观察者对象难以复用，因为观察者的update()方法是按需要定义的参数，可能无法兼顾没有考虑到的使用情况。
	这就意味着出现新情况的时候，就可能提供新的update()方法，或者是干脆重新实现观察者；
	而拉模型就不会造成这样的情况，因为拉模型下，update()方法的参数是主题对象本身，这基本上是主题对象能传递的最大数据集合了，基本上可以适应各种情况的需要。

代理模式：
	所谓代理，就是一个人或者机构代表另一个人或者机构采取行动。
	在代理模式中的角色：
		抽象对象角色：声明了目标对象和代理对象的共同接口，这样一来在任何可以使用目标对象的地方都可以使用代理对象。
		目标对象角色：定义了代理对象所代表的目标对象。
		代理对象角色：
			* 代理对象内部含有目标对象的引用，从而可以在任何时候操作目标对象；
			* 代理对象提供一个与目标对象相同的接口，以便可以在任何时候替代目标对象。
			* 代理对象通常在客户端调用传递给目标对象之前或之后，执行某个操作，而不是单纯地将调用传递给目标对象。
接口对象角色：
public interface Object {
	public void operation();
}
目标对象角色：
public class RealObject implements Object {
	public void operation(){
		System.out.print("一些操作");
	}
}
代理对象角色：
public class ProxyObject implements Object {
	//代理对象内部必须有目标对象的引用，且实现同一接口，目的是提供相同的功能
	RealObject realObject = new RealObject();
	public void operation() {
		//调用目标对象之前可以做相关操作
		System.out.print("before");
		realObject.operation();
		//调用目标对象之后可以做相关操作
		System.out.print("after");
	}
}

JDK动态代理 对“装饰者”设计模式 简化。使用前提：必须有接口
    1.目标类：接口 + 实现类
    2.切面类：用于存通知 MyAspect
    3.工厂类：编写工厂生成代理
    4.测试

//目标类
public interface UserService {
    public void addUser();
    public void updateUser();
    public void deleteUser();
}

//切面类
public class MyAspect {
    public void before(){
        System.out.println("鸡首");
    }
    
    public void after(){
        System.out.println("牛后");
    }
}

//工厂类
public class MyBeanFactory {
    
    public static UserService createService(){
        //1 目标类
        final UserService userService = new UserServiceImpl();
        //2 切面类
        final MyAspect myAspect = new MyAspect();
        
        /* 
         *  3 生成代理类：将目标类（切入点）和 切面类（通知） 结合 --> 切面
         *  Proxy.newProxyInstance
         *      参数1：loader，类加载器，动态代理类是在运行时创建，任何类都需要类加载器将其加载到内存。
         *          一般情况：当前类.class.getClassLoader();
         *          也可以：目标类的!实例!.getClass().getClassLoader();
         *      参数2：Class[] interfaces 代理类需要实现的所有接口
         *          方式1：目标类实例.getClass().getInterfaces();注意：只能获得自己接口，不能获得父元素接口
         *          方式2：new Class[]{UserService.class}   
         *      参数3：InvocationHandler，这是一个接口，必须进行实现类，一般采用匿名内部
         *          提供 invoke 方法，!代理类的每一个方法执行时，都将调用一次invoke!
         *              参数31：Object proxy ：代理对象
         *              参数32：Method method : 代理对象当前执行的方法的描述对象（反射）
         *                  执行方法名：method.getName()
         *                  执行方法：method.invoke(目标对象，实际参数)
         *              参数33：Object[] args :方法实际参数
         * 
         */
        UserService proxService = (UserService)Proxy.newProxyInstance(
            MyBeanFactory.class.getClassLoader(), 
            userService.getClass().getInterfaces(), 
            new InvocationHandler() {
                @Override
                public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                    
                    //前执行
                    myAspect.before();
                    
                    //执行目标类的方法，有返回值，也就是addUser的返回值，是null
                    Object obj = method.invoke(userService, args);
                    
                    //后执行
                    myAspect.after();
                    
                    //返回方法的返回值
                    return obj;
                }
            }
        );
        return proxService;
    }
}

//测试类
@Test
public void demo01(){
    UserService userService = MyBeanFactory.createService();
    userService.addUser();
    userService.updateUser();
    userService.deleteUser();
}

=======

cglib代理:
    public class MyBeanFactory {
        public static UserServiceImpl createService(){
            //1 目标类
            final UserServiceImpl userService = new UserServiceImpl();
            //2切面类
            final MyAspect myAspect = new MyAspect();
            
            // 3.代理类 ，采用cglib，底层创建目标类的子类
            //3.1 核心类
            Enhancer enhancer = new Enhancer();
            //3.2 确定父类
            enhancer.setSuperclass(userService.getClass());
            /* 3.3 设置回调函数, MethodInterceptor接口 等效 jdk中的 InvocationHandler接口
             *  intercept() 等效 jdk  invoke()
             *      参数1、参数2、参数3：和invoke一样
             *      参数4：methodProxy 方法的代理
             */
            enhancer.setCallback(new MethodInterceptor() {
                @Override
                public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
                    //前
                    myAspect.before();
                    
                    //执行目标类的方法
                    Object obj = method.invoke(userService, args);
                    //执行代理类的父类（其实就是目标类）中的方法，和上面一行的效果等价，可以不写。
                    methodProxy.invokeSuper(proxy, args);
                    
                    //后
                    myAspect.after();
                    
                    return obj;
                }
            });
            
            //3.4 创建代理
            UserServiceImpl proxService = (UserServiceImpl) enhancer.create();
            
            return proxService;
        }
    }

生产者消费者模式：
	1.wait/notify
	public class CusAndPro {
		private int queueSize = 10;
		private PriorityQueue<Integer> queue = new PriorityQueue<>(queueSize);
		
		public static void main(String[] args) {
			CusAndPro cap = new CusAndPro();
			Consumer cus = cap.new Consumer();
			Producer pro = cap.new Producer();
			Thread cusT = new Thread(cus);
			Thread proT = new Thread(pro);

			cusT.start();
			proT.start();
		}

		class Consumer implements Runnable{
			public void run(){
				consume();
			}

			private void consume() {
				while(true){
					synchronized (queue) {
						while(queue.size() == 0){
							try {
	                            System.out.println("队列空，等待数据。。。");
	                            queue.wait();
	                        } catch (InterruptedException e) {
	                            e.printStackTrace();
	                            queue.notify();
	                        }
						}

						queue.poll() ;
	                    queue.notify();
	                    System.out.println("从队列中取走一个元素，队列中剩余"+queue.size()+"个");
					}
				}
			}
		}

		class Producer implements Runnable{
	        @Override
	        public void run() {
	            produce();
	        }
	 
	        private void produce() {
	            while(true){
	                synchronized(queue) {
	                    while(queue.size() == queueSize){
	                        try {
	                            System.out.println("队列已满，等待空余的空间");
	                            queue.wait();
	                        } catch (InterruptedException e) {
	                            e.printStackTrace();
	                            queue.notify();
	                        }
	                    }
	                    
	                    queue.offer(1);   // 每次插入一个元素
	                    queue.notify();
	                    System.out.println("向队列取中插入一个元素，队列剩余空间：" + (queueSize - queue.size()));
	                }
	            }
	        }     
	    }
	}

	2.await/signal
	public class CustormerAndProducterByCondition {
	    private int queueSize = 10 ;
	    private PriorityQueue<Integer> queue = new PriorityQueue<Integer>(queueSize);
	 
	    private Lock lock = new ReentrantLock();
	    private Condition full = lock.newCondition();
	    private Condition empty = lock.newCondition();
	 
	    class Consumer implements Runnable{
	        @Override
	        public void run() {
	            consume();
	        }
	        
	        private void consume() {
	            while(true){
	                lock.lock();
	                try {
	                    while(queue.size() == 0){
	                        try {
	                            System.out.println("队列空，等待数据");
	                            empty.await();
	                        } catch (InterruptedException e) {
	                            e.printStackTrace();
	                        }
	                    }
	                    queue.poll();
	                    full.signal();
	                    System.out.println("从队列取走一个元素，队列剩余" + queue.size() + "个元素");
	                } finally{
	                    lock.unlock();
	                }
	            }
	 
	        }
	    }

	    class Producer implements Runnable{
	        @Override
	        public void run() {
	            produce();
	        }
	 
	        private void produce() {
	            while(true){
	                lock.lock();
	                try {
	                    while(queue.size()== queueSize){
	                        try {
	                            System.out.println("队列满，等待有空余空间");
	                            full.await();
	                        } catch (InterruptedException e) {
	                            e.printStackTrace();
	                        }
	                    }
	                    queue.offer(1);
	                    empty.signal();
	                } finally{
	                    lock.unlock();
	                }
	            }
	        }
	 
	    }
	     
	    public static void main(String[] args) {
	        CustormerAndProducterByCondition cap = new CustormerAndProducterByCondition();
	        Consumer cus = cap.new Consumer();
	        Producer pro = cap.new Producer();
	        Thread cusT = new Thread(cus);
	        Thread proT = new Thread(pro);
	         
	        proT.start();
	        cusT.start();
	    }
	}

装饰者模式：
//抽象构建角色
public interface TheGreatestSage {
	//move方法：所有的具体构件类和装饰类必须实现的
	public void move();
}
//具体构建角色
public class Monkey implements TheGreatestSage {
	public void move() {
		System.out.print("Monkey move");
	}
}
//抽象装饰角色
public class Change implements TheGreatestSage {
	//装饰角色中要有基础的角色的引用
	private TheGreatestSage sage;
	public Change (TheGreatestSage sage){
		this.sage = sage;
	}

	//实现move方法，但实现的过程只是调用，最基础的角色中的move方法
	public void move(){
		sage.move();
	}
}
//具体装饰角色
public class Fish extends Change {
	public Fish(TheGreatestSage sage){
		super(sage);
	}

	public void move() {
		System.out.print("Fish move");
	}
}
public class Bird extends Change { 
    public Bird(TheGreatestSage sage) {
        super(sage);
    }

    @Override
    public void move() {
        System.out.println("Bird Move");
    }
}
//客户端
public static void main(String[] args) {
	TheGreatestSage sage = new Monkey();
	TheGreatestSage bird = new Bird(sage);
	TheGreatestSage fish = new Fish(bird);

	// TheGreatestSage fish = new Fish(new Bird(sage));
	fish.move();
}

装饰模式以对客户透明的方式动态地给一个对象附加上更多的责任。换言之，客户端并不会觉得对象在装饰前和装饰后有什么不同。装饰模式可以在不使用创造更多子类的情况下，将对象的功能加以扩展。

	//IO
	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	Scanner sc = new Scanner(System.in);

模版设计模式:
	只定义个算法的框架,具体的算法延迟到子类中实现
	//1
	public abstract class GetTime {
		// 需求：请给我计算出一段代码的运行时间
		public long getTime() {
			long start = System.currentTimeMillis();
			// 再给我测试一个代码：集合操作的，多线程操作，常用API操作的等等...
			code();
			long end = System.currentTimeMillis();
			return end - start;
		}
		//定义一个抽象方法(方法抽象,类必须抽象)
		public abstract void code();
	}
	//2
	public class ForDemo extends GetTime {
		@Override
		public void code() {
			for (int x = 0; x < 100000; x++) {
				System.out.println(x);
			}
		}
	}
	//3
	public class GetTimeDemo {
		public static void main(String[] args) {
			GetTime gt = new ForDemo();
			System.out.println(gt.getTime() + "毫秒");
		}
	}
