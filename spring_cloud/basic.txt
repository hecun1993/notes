Spring Cloud 为开发⼈人员提供快速构建分布式系统的⼀一些通⽤用模式，其中包括：配置管理理、服务发现、服务短路路、智能路路由、微型⽹网关、控制总线、⼀一次性令牌、全局锁、领导选举、分布式会话和集群状态。分布式系统间的协调导向样板模式，并且使⽤用 Spring Cloud 的开发⼈人员能够快速地构建实现这些模式的服务和应⽤用。这些服务和应⽤用也将在任何环境下⼯工作良好，⽆无论是开发者的笔记本、还是数据中⼼心裸机或者管控平台。

dubbo和spring Cloud
    dubbo用在服务的治理, 稳定性好, 远程rpc调用性能好
    spring cloud把应用当做服务, 对服务的实体进行管理

Java中的标准事件接口是 EventObject
对Spring来说, 根抽象类是 ApplicationEvent extends EventObject

Java中的标准监听器是 EventListener
对Spring来说, 是 ApplicationListener<E extends ApplicationEvent> extends EventListener
(泛型表示: 监听器监听什么事件, 这个事件必须继承自ApplicationEvent)

spring中发布事件的根接口 ApplicationEventPublisher, 里面有publishEvent方法
被根上下文接口 ConfigurableApplicationContext 接口继承, 也被AnnotationConfigApplicationContext类实现, 所以实例化AnnotationConfigApplicationContext上下文后, 就可以发布事件

@SpringCloudApplication
    @SpringBootApplication
    @EnableCircuitBreaker : 服务短路
    @EnableDiscoveryClient

BootStrap上下文是优先于ApplicationContext的上下文创建, 且是后者的parent
    在run方法中, prepareEnvironment(listeners, applicationArguments); 会发出一个ApplicationEnvironmentPreparedEvent事件, 被BootstrapApplicationListener监听到, 然后创建Bootstrap上下文. 
    而ApplicationContext上下文是在之后创建的.(context = createApplicationContext();)


单体架构的优势: 便于开发, 易于测试, 易于部署
单体架构的不足: 
    复杂性高(代码难以理解)
    交付效率低
    伸缩性差(单体只能整体横向扩展, 无法垂直扩展, 区分IO密集型和CPU密集型)
    可靠性差
    阻碍使用新的技术, 必须用统一框架和语言

微服务架构的优势
    高内聚低耦合的小型服务, 运行在独立进程, 采用轻量级通信机制, 独立自动部署, 采用不同的语言和存储
    易于开发和维护
    独立部署
    伸缩性强(定制型扩展)
    与组织结构相匹配
    技术的异构性

水平复制(负载均衡) 
功能拆分(House, User...) 
数据分片(多个数据库)

PC/Mobile -> API GATEWAY -> 注册中心 (订单, 商品, 支付) -> 数据库

如果是单体应用增加实例, 会在反向代理nginx中增加配置. 无法理清各种调用关系.
服务注册和发现, 为客户端的负载均衡提供可能

面临的挑战
    服务拆分(面临分布式事务的问题: 延时高, NoSQL不支持)
    数据一致性(使用最终一致性而不是强一致性)
        可靠事件模式(消息队列)
        补偿模式
    保持拆分粒度较大, 将事务操作放在一个服务中

    服务通信
        RPC/REST/ASYNC
        REST: HTTP协议: 
                方便调试, 跨语言, 容易
                性能差, 协议复杂
        RPC: TCP协议
            dubbo, thrift
            传参和响应结果可以在代码中看出
            不支持跨语言, 需要定义各种规范文件
        
    服务网关
        身份认证, 路由服务, 流量控制, 日志统计


全链路追踪的背景
    1. 如何串联调用链, 快速定位问题
    2. 如何厘清服务依赖关系
    3. 如何进行各个服务接口的性能分析
    4. 如何跟踪业务流的处理顺序

解决方案
    Google Dapper
    Twitter Zipkin
    Spring Cloud Sleuth

Spring Cloud Sleuth
    与springboot集成方便
    支持Zipkin输出(mysql es)
    支持MQ和HTTP

基本概念:
    Trace(链路)
    Span(跨度)
    Annotation(标注) CS, SR, SS, CR