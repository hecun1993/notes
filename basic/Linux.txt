ps -ef | grep redis 查看进程
netstat -nap | grep 5672 查看端口

CPU使用率：
    一段时间内CPU的使用状况，从这个指标可以看出某一段时间内CPU资源被占用的情况。
Load Average：
    某一段时间内，CPU正在处理以及等待CPU处理的进程数的之和。Load Average是从另一个角度来体现CPU的使用状态的。


tar -zxvf zookeeper-3.4.6.tar.gz [解压缩后的文件名]
	z 指定压缩包的压缩格式
	x 解压缩
	c 创建压缩
	v 显示解压缩的过程
	f 指定解压缩之后的文件名,在压缩包后加上文件名即可

mv zoo_sample.cfg zoo.cfg 改名

service iptables stop 关闭防火墙
chkconfig iptables off 开机不启动防火墙

如果只想看文件的前5行，可以使用head命令，如：
head -5 /etc/passwd

如果想查看文件的后10行，可以使用tail命令，如：
tail -10 /etc/passwd
tail -f /var/log/messages
参数-f使tail不停地去读最新的内容，这样有实时监视的效果

查看某一应用是否启动：
ps aux | grep nginx
查看某一端口是否被占用:
netstat -ano | grep 80

top: 查看cpu的一些状态
free: 查看内存
df -hl 查看磁盘剩余空间
iftop和iotop: 查看网络io情况

查找某一个文件
find / -name hadoop-daemon.sh

taskkill /f /t /im 进程名称
如:taskkill /f /t /im /javaw.exe

列出所有的进程: lsof -i
查询端口被哪个进程(PID)占用: lsof -i:8080
结束这个占用特定端口的进程： kill -9 PID

rpm －ivh 软件包名
安装软件包并显示安装进度。

rpm -qa
查询已经安装哪些软件包。

rpm -q 软件包名
查询指定软件包是否已经安装。

rpm -Uvh  软件包名
升级一个软件包。

rpm -e 软件包名
删除指定软件包。

CPU密集型任务 
尽量使用较小的线程池，一般为CPU核心数+1。 
因为CPU密集型任务使得CPU使用率很高，若开过多的线程数，只能增加上下文切换的次数，因此会带来额外的开销。

IO密集型任务 
可以使用稍大的线程池，一般为2*CPU核心数。 
IO密集型任务CPU使用率并不高，因此可以让CPU在等待IO的时候去处理别的任务，充分利用CPU时间。

混合型任务 
可以将任务分成IO密集型和CPU密集型任务，然后分别用不同的线程池去处理。 
只要分完之后两个任务的执行时间相差不大，那么就会比串行执行来的高效。 因为如果划分之后两个任务执行时间相差甚远，那么先执行完的任务就要等后执行完的任务，最终的时间仍然取决于后执行完的任务，而且还要加上任务拆分与合并的开销，得不偿失。

IO优化中，这样的估算公式可能更适合：
最佳线程数目 = （（线程等待时间+线程CPU时间）/线程CPU时间 ）* CPU数目
因为很显然，线程等待时间所占比例越高，需要越多线程。线程CPU时间所占比例越高，需要越少线程。
比如平均每个线程CPU运行时间为0.5s，而线程等待时间（非CPU运行时间，比如IO）为1.5s，CPU核心数为8，那么根据上面这个公式估算得到：((0.5+1.5)/0.5)*8=32。
这个公式进一步转化为：最佳线程数目 = （线程等待时间与线程CPU时间之比 + 1）* CPU数目

创建用户
	useradd -d /usr/geely -m geely
	passwd geely

	vim /etc/sudoers
	查找root, 在下方给geely加一样的sudo权限

make -j 4 用4核来编译, 加快编译速度

查看cpu核数
cat /proc/cpuinfo | grep processor
