`秒杀的难点在于如何高效的处理竞争`

秒杀系统的业务流程:
    核心: 是对库存的分析
    商家 添加/调整 发货/核账 库存 秒杀/预售 付款/退货 用户

1. 用户对库存的操作
    减库存(update) + 记录购买明细(insert) => 记录完整事务 数据落地
    (谁购买成功, 成功的时间/有效期, 付款/发货信息)

    事务:
        start transaction
            update 库存数量 <-- 竞争出现在这里
                行级锁: update table set num = num - 1 where id = 10 and num > 1;
                ==> 秒杀的难点在于如何高效的处理竞争
            insert 购买明细
        commit

        sku id = 2 kucun = 2

秒杀系统中会发生高并发的地方:
    1. 获得系统时间
        因为所有的html等静态资源是放在CDN中的, CDN必须向系统发送请求获得服务器的时间
        但实际上就是访问java的一个api, Java访问内存，一秒可以访问一亿次，10纳秒一次。
        因此, 不需要考虑高并发问题.
    2. 根据系统时间和秒杀商品的开始结束秒杀时间, 来获得是否可以秒杀, 以及秒杀地址
        用redis做服务器缓存, 一秒可抗10wQPS，可做集群分布式，可达到每秒百万QPS
        mysql和redis的一致性维护成本低:(超时过期, 从redis穿透到mysql, 主动更新)
    3. 秒杀操作优化分析
        无法使用CDN缓存
        无法使用redis, 因为库存问题, 会导致无法使用事务
        出现单行热门商品的mysql的update竞争

    大公司的解决方案:
        1.利用nosql实现一个原子计数器, 记录商品的库存, 保证原子性
        2.减库存之后, 会记录行为消息, 谁减了库存, 作为一个消息放在分布式消息队列中rocket mq, rabbit mq, active mq, kafka
        3.后端的服务会从mq中取出并消费这些消息, 存在mysql中
        优势: 可以抗住很高很高的并发(主要在第一步, 做成redis集群)
        劣势: 成本太大(运维成本, 开发成本, 无法保证同一用户重复秒杀(再维护一个nosql, 记录谁秒杀过了), 不适合新手)

    实际上:
        mysql直接对单行数据的update操作(同一个id执行update减库存) -- 一条的update可以支持4wQPS
        同一个商品, 1s内可以被卖4w次

        但如果用java控制事务, 由于有行级锁, 所以, 时间耗费在了等待获得锁
        更重要的是, java操作mysql, 会有网络延迟(比如北京的系统, 上海的mysql) 和gc的耗时. 这些也应该所在等待获得锁的耗时中.
        从update 减库存 -> insert 购买明细 -> commit/rollback
        (如果整个过程耗时2ms, 那么1s的QPS只有500次)
    优化方向: 减少行级锁的持有时间
        同城机房延迟(0.5-2ms) 异地机房延迟(13ms) max(1000qps, 50qps)
        gc(50ms) max(20qps)

        所以, 应该把客户端的逻辑放在mysql的服务器上, 避免java操作过程的网络延迟和gc影响
            1. 修改mysql源码, update之后自动提交
            2. 使用存储过程, 整个事务在mysql端完成
               简单优化:
                   从
                    update 减库存 -> insert 购买明细 -> commit/rollback
                              (等待行级锁)       (等待行级锁)
                   调整为:
                    insert 购买明细 -> update 减库存 -> commit/rollback
                              (无锁,可以并行)     (等待行级锁)
    总结:
        前端控制: 暴露接口, 防止秒杀按钮重复点击
        动静态数据分离: CDN缓存, 后端缓存
        事务竞争优化: 减少事务锁的时间

迭代开发
Sku == id 在一个品牌下每一个不同的组合(型号+颜色...)就是一个Sku
一个商品对应n个Sku

电商活动倒计时方案：
	1、确定一个基准时间。可以使用一个sql语句从数据库中取出一个当前时间。SELECT NOW()；
	2、活动开始的时间是固定的。
	3、使用活动开始时间-基准时间可以计算出一个秒为单位的数值。
	4、在redis中设置一个key（活动开始标识）。设置key的过期时间为第三步计算出来的时间。
	5、展示页面的时候取出key的有效时间。Ttl命令。使用js倒计时。
	6、一旦活动开始的key失效，说明活动开始。
	7、需要在活动的逻辑中，先判断活动是否开始。

秒杀方案：
	1、把商品的数量放到redis中。
	2、秒杀时使用decr命令对商品数量减一。如果不是负数说明抢到。
	3、一旦返回数值变为0说明商品已售完。

正常的商品表
参与秒杀的秒杀商品表(多了商品id, 还有与秒杀有关的属性)
普通的订单表
秒杀订单表(记录了用户id, 商品id, 订单id)

redis: 内存数据库, 但断电之后还可以有数据, 自动的数据持久化
druid: 可以监控数据库连接池的连接状况

make -j 4 用4核来编译, 加快编译速度

修改redis.conf
改绑定的可以访问本redis的ip, 由127.0.0.1改成0.0.0.0
改允许后台执行 daemonize yes
改redis的密码, requirepass 123456

重启redis, 连上redis-cli后, 使用shutdown save命令, 然后再重新启动redis-server ./redis.conf

此时需要先auth 123456, 然后再get key1

redis-server ./redis.conf
ps -ef | grep redis 查看进程
netstat -nap | grep 5672 查看端口

cd utils
./install_server.sh
安装成系统服务

chkconfig --list | grep redis
systemctl start redis_6379

用fastjson对对象进行序列化, 得到的结果是json, 可读的
但用效率最高的谷歌的序列化工具, 得到的结果是二进制的不可读的

一般我们说某个网站的并发是多少并不准确, 应该说某个网站在xx并发下, 其qps是多少.

CPU使用率：一段时间内CPU的使用状况，从这个指标可以看出某一段时间内CPU资源被占用的情况。
Load Average：某一段时间内，CPU正在处理以及等待CPU处理的进程数的之和。Load Average是从另一个角度来体现CPU的使用状态的。

CPU使用率和Load Average的关系：
    拿去医院体检做一个例子：
    用户：待检查的同学
    CPU：检查的科室（B超、眼科。。。。）

1、Load高，CPU使用率低:
    眼科一共有3个医生，检查有次序，必须前一个医生检查结束了才能到下一个医生处理
    由于第一个医生的检查耗时比较长，导致后面很多同学排队，但是接下去2个医生都处于空闲状态。
        Load：等待的同学，由于等待的同学较多，所以Load的值较高
        CPU使用率：只有一个医生处于工作状态，所以CPU的使用率为33.33%

2、Load低，CPU使用率高：
    假设B超科室有和眼科同样多的医生，但是每个医生之间的工作是独立的。
    来一个新同学的时间，大约是检查完一个同学的时间。
        Load：等待的同学，基本<=1
        CPU使用率：每个医生都处于忙碌状态，CPU使用率接近100%

由上面可以看到，不能单纯从一个方面来看性能的优劣。同样，性能调优也可以从多方面入手。

每秒查询率QPS是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准，
在因特网上，作为域名系统服务器的机器的性能经常用每秒查询率来衡量。
原理：每天80%的访问集中在20%的时间里，这20%时间叫做峰值时间

公式：( 总PV数 * 80% ) / ( 每天秒数 * 20% ) = 峰值时间每秒请求数(QPS)
机器：峰值时间每秒QPS / 单台机器的QPS = 需要的机器

问：每天300w PV 的在单台机器上，这台机器需要多少QPS？
答：( 3000000 * 0.8 ) / (86400 * 0.2 ) = 139 (QPS)
问：如果一台机器的QPS是58，需要几台机器来支持？
答：139 / 58 = 3

pv是指页面被浏览的次数，比如你打开一网页，那么这个网站的pv就算加了一次；
tps是每秒内的事务数，比如执行了dml操作，那么相应的tps会增加；
qps是指每秒内查询次数，比如执行了select操作，相应的qps会增加。

jmeter命令行
1. 在windows上设置好jmx文件
2. 命令行执行: ./jmeter.sh -n -t xxx.jmx -l result.jtl
    -n 不使用图形界面 -t 脚本 -l 输出结果
3. 把生成的result.jtl导入jmeter中查看结果

redis的压测

redis-benchmark -h 127.0.0.1 -p 6379 -c 100 -n 100000 100个并发 100000个请求
redis-benchmark -h 127.0.0.1 -p 6379 -q -d 100 存取大小为100字节的数据包
redis-benchmark -h 127.0.0.1 -p 6379 -t set, lpush -q -n 100000

把SpringBoot打包成war包

1. 添加provided依赖, 只在编译时使用tomcat的依赖, 因为打包成war包, 发布到服务器上, 服务器有tomcat
所以, 要用provided
        <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
2. 添加maven-war-plugin插件
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-war-plugin</artifactId>
            <configuration>
                <failOnMissingWebXml>false</failOnMissingWebXml>
            </configuration>
        </plugin>
3. <packaging>war</packaging>

4.

public class MiaoshaApplication extends SpringBootServletInitializer {

   	public static void main(String[] args) {
   		SpringApplication.run(MiaoshaApplication.class, args);
   	}

   	@Override
   	protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {
   		return builder.sources(MiaoshaApplication.class);
   	}
}

命令行压测:
    nohup java -jar -server -Xmx2048m -Xms2048m miaosha.jar &

查看cpu核数

cat /proc/cpuinfo | grep processor



页面优化技术

1. 页面缓存 URL缓存 对象缓存

页面缓存: 取缓存, 手动渲染模版, 结果输出

瓶颈是数据库, 解决方案就是加缓存

2. 页面静态化, 前后端分离

jsp thymeleaf都是动态网页, 但静态化是指页面就是纯的html, 通过js, ajax拿到数据来渲染页面.
好处在于浏览器可以把HTML缓存在客户端, 这样只需要下载动态数据

要使用Thymeleaf提供的ViewResolver对象, 得到模版引擎, 然后调用process方法进行渲染.

3. 静态资源优化(js css 图片)

4. CDN优化

页面缓存: 时间较短, 比如1分钟
	@RequestMapping(value="/to_list", produces="text/html")
	@ResponseBody
	public String list(HttpServletRequest request, HttpServletResponse response, Model model,
					    MiaoshaUser user) {
		model.addAttribute("user", user);
		//1. 先取缓存
		String html = redisService.get(GoodsKey.getGoodsList, "", String.class);
		if(!StringUtils.isEmpty(html)) {
			return html;
		}
		//2. 缓存中没有, 才从数据库查询goodsList
		List<GoodsVo> goodsList = goodsService.listGoodsVo();
		model.addAttribute("goodsList", goodsList);

		//这里不直接返回模版名称, 而是手动渲染
	    	//return "goods_list";
		SpringWebContext ctx = new SpringWebContext(request,response,
				request.getServletContext(),request.getLocale(), model.asMap(), applicationContext);
		//3. 手动渲染
		html = thymeleafViewResolver.getTemplateEngine().process("goods_list", ctx);
		if(!StringUtils.isEmpty(html)) {
			//4. 更新缓存
			redisService.set(GoodsKey.getGoodsList, "", html);
		}
		return html;
	}

	thymeleafViewResolver, applicationContext, 都是直接从spring容器中获取的, 直接注入即可

URL缓存, 根据id的不同, 显示不同的商品详情
	@RequestMapping(value="/to_detail/{goodsId}", produces="text/html")
	@ResponseBody
	public String detail(HttpServletRequest request, HttpServletResponse response, Model model,
						MiaoshaUser user, @PathVariable("goodsId") long goodsId) {
		//1. 取缓存
		String html = redisService.get(GoodsKey.getGoodsDetail, ""+goodsId, String.class);
		if(!StringUtils.isEmpty(html)) {
			return html;
		}

		//缓存中没有, 则要从数据库中读取
		GoodsVo goods = goodsService.getGoodsVoByGoodsId(goodsId);
		model.addAttribute("goods", goods);

		long startAt = goods.getStartDate().getTime();
		long endAt = goods.getEndDate().getTime();
		//当前时间
		long now = System.currentTimeMillis();

		int miaoshaStatus = 0;
		int remainSeconds = 0;
		if(now < startAt) {//秒杀还没开始，倒计时
			miaoshaStatus = 0;
			remainSeconds = (int)((startAt - now )/1000);
		} else  if(now > endAt){//秒杀已经结束
			miaoshaStatus = 2;
			remainSeconds = -1;
		} else {//秒杀进行中
			miaoshaStatus = 1;
			remainSeconds = 0;
		}
		model.addAttribute("miaoshaStatus", miaoshaStatus);
		model.addAttribute("remainSeconds", remainSeconds);
		//这里就不直接返回, 而是要手动渲染
	         return "goods_detail";

		//2. 手动渲染
		SpringWebContext ctx = new SpringWebContext(request, response,
				request.getServletContext(), request.getLocale(), model.asMap(), applicationContext);
		html = thymeleafViewResolver.getTemplateEngine().process("goods_detail", ctx);
		if(!StringUtils.isEmpty(html)) {
			//3. 更新缓存
			redisService.set(GoodsKey.getGoodsDetail, "" + goodsId, html);
		}
		return html;
	}

对象缓存: 粒度最小, 比如缓存用户信息
	public MiaoshaUser getById(long id) {
		//1. 取缓存
		MiaoshaUser user = redisService.get(MiaoshaUserKey.getById, ""+id, MiaoshaUser.class);
		if(user != null) {
			return user;
		}
		//2. 取数据库
		user = miaoshaUserDao.getById(id);
		if(user != null) {
			//3. 更新缓存
			redisService.set(MiaoshaUserKey.getById, ""+id, user);
		}
		return user;
	}

	//修改密码的操作
	public boolean updatePassword(String token, long id, String formPass) {
		//1. 取user
		MiaoshaUser user = getById(id);
		if(user == null) {
			throw new GlobalException(CodeMsg.MOBILE_NOT_EXIST);
		}
		//2.更新数据库中用户的密码
		MiaoshaUser toBeUpdate = new MiaoshaUser();
		toBeUpdate.setId(id);
		toBeUpdate.setPassword(MD5Util.formPassToDBPass(formPass, user.getSalt()));
		miaoshaUserDao.update(toBeUpdate);
		//3. 更新缓存中与user有关的value, 这里有两个, 一个是token, 一个是getById
		redisService.delete(MiaoshaUserKey.getById, ""+id);
		user.setPassword(toBeUpdate.getPassword());
		redisService.set(MiaoshaUserKey.token, token, user);
		return true;
	}

注意: service可以调用自己的dao, 但是不要调用别的dao, 而是要调用别的service, 因为别的service中才会设置缓存

nohup java -jar miaosha.jar &
tail -f nohup.out
./jmeter/bin/jmeter.sh -n -t miaosha.jmx -l result.jtl

页面静态化 -- 更为激进的缓存, 直接把页面缓存在了用户端的浏览器上.
	@RequestMapping(value="/detail/{goodsId}")
         @ResponseBody
         public Result<GoodsDetailVo> detail(HttpServletRequest request, HttpServletResponse response, MiaoshaUser user,
    									      @PathVariable("goodsId") long goodsId) {
	    	GoodsVo goods = goodsService.getGoodsVoByGoodsId(goodsId);

	    	long startAt = goods.getStartDate().getTime();
	    	long endAt = goods.getEndDate().getTime();
	    	long now = System.currentTimeMillis();

	    	int miaoshaStatus = 0;
	    	int remainSeconds = 0;

	    	if(now < startAt) {//秒杀还没开始，倒计时
	    		miaoshaStatus = 0;
	    		remainSeconds = (int)((startAt - now )/1000);
	    	} else  if(now > endAt){//秒杀已经结束
	    		miaoshaStatus = 2;
	    		remainSeconds = -1;
	    	} else {//秒杀进行中
	    		miaoshaStatus = 1;
	    		remainSeconds = 0;
	    	}
	    	//页面静态化就是前后端分离的restful模式, 返回json格式的对象即可
	    	GoodsDetailVo vo = new GoodsDetailVo();

	    	vo.setGoods(goods);
	    	vo.setUser(user);
	    	vo.setRemainSeconds(remainSeconds);
	    	vo.setMiaoshaStatus(miaoshaStatus);

	    	return Result.success(vo);
	}

商品详情页面里的js代码
	function render(detail) {
		var miaoshaStatus = detail.miaoshaStatus;
		var  remainSeconds = detail.remainSeconds;
		var goods = detail.goods;
		var user = detail.user;
		if(user){
			$("#userTip").hide();
		}
		$("#goodsName").text(goods.goodsName);
		$("#goodsImg").attr("src", goods.goodsImg);
		$("#startTime").text(new Date(goods.startDate).format("yyyy-MM-dd hh:mm:ss"));
		$("#remainSeconds").val(remainSeconds);
		$("#goodsId").val(goods.id);
		$("#goodsPrice").text(goods.goodsPrice);
		$("#miaoshaPrice").text(goods.miaoshaPrice);
		$("#stockCount").text(goods.stockCount);
		countDown();
	}

	$(function(){
		getDetail();
	});

	function getDetail(){
		var goodsId = g_getQueryString("goodsId");
		$.ajax({
			url:"/goods/detail/"+goodsId,
			type:"GET",
			success:function(data){
				if(data.code == 0){
					render(data.data);
				}else{
					layer.msg(data.msg);
				}
			},
			error:function(){
				layer.msg("客户端请求有误");
			}
		});
	}

	//倒计时的现实逻辑
	function countDown(){
		var remainSeconds = $("#remainSeconds").val();
		var timeout;
		if(remainSeconds > 0){//秒杀还没开始，倒计时
			$("#buyButton").attr("disabled", true);
		         $("#miaoshaTip").html("秒杀倒计时：" + remainSeconds + "秒");
			timeout = setTimeout(function() {
				$("#countDown").text(remainSeconds - 1);
				$("#remainSeconds").val(remainSeconds - 1);
				countDown();
			}, 1000);
		} else if(remainSeconds == 0){//秒杀进行中
			$("#buyButton").attr("disabled", false);
			if(timeout){
				clearTimeout(timeout);
			}
			$("#miaoshaTip").html("秒杀进行中");
		} else {//秒杀已经结束
			$("#buyButton").attr("disabled", true);
			$("#miaoshaTip").html("秒杀已经结束");
		}
	}

	// 获取url参数
	function g_getQueryString(name) {
		var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
		var r = window.location.search.substr(1).match(reg);
		if(r != null) return unescape(r[2]);
		return null;
	};

	//设定时间格式化函数，使用new Date().format("yyyyMMddhhmmss");
	Date.prototype.format = function (format) {
	    var args = {
	        "M+": this.getMonth() + 1,
	        "d+": this.getDate(),
	        "h+": this.getHours(),
	        "m+": this.getMinutes(),
	        "s+": this.getSeconds(),
	    };
	    if (/(y+)/.test(format))
	        format = format.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
	    for (var i in args) {
	        var n = args[i];
	        if (new RegExp("(" + i + ")").test(format))
	            format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? n : ("00" + n).substr(("" + n).length));
	    }
	    return format;
	};

	@RequestMapping(value="/do_miaosha", method=RequestMethod.POST)
	@ResponseBody
	public Result<OrderInfo> miaosha(Model model,MiaoshaUser user,
									@RequestParam("goodsId")long goodsId) {
		model.addAttribute("user", user);
		if(user == null) {
			return Result.error(CodeMsg.SESSION_ERROR);
		}
		//1. 判断库存
		GoodsVo goods = goodsService.getGoodsVoByGoodsId(goodsId);//10个商品，req1 req2
		int stock = goods.getStockCount();
		if(stock <= 0) {
			return Result.error(CodeMsg.MIAO_SHA_OVER);
		}
		//2. 判断是否已经秒杀到了
		MiaoshaOrder order = orderService.getMiaoshaOrderByUserIdGoodsId(user.getId(), goodsId);
		if(order != null) {
			return Result.error(CodeMsg.REPEATE_MIAOSHA);
		}
		//3. 减库存 下订单 写入秒杀订单
		OrderInfo orderInfo = miaoshaService.miaosha(user, goods);
	         return Result.success(orderInfo);
	}

	function doMiaosha() {
		$.ajax({
			url:"/miaosha/do_miaosha",
			type:"POST",
			data:{
				goodsId:$("#goodsId").val(),
			},
			success:function(data){
				if(data.code == 0){
					//秒杀到, 则跳转到订单详情页面
					window.location.href="/order_detail.htm?orderId=" + data.data.id;
				} else {
					layer.msg(data.msg);
				}
			},
			error:function(){
				layer.msg("客户端请求有误");
			}
		});
	}

状态码是304的时候, 就说明页面已经缓存在了客户端, 服务器告诉客户端, 页面没有变化, 可以直接使用缓存, 就返回了304

# static 把页面放在客户端, 不用询问服务端了.
spring.resources.add-mappings=true
spring.resources.cache-period= 3600
spring.resources.chain.cache=true
spring.resources.chain.enabled=true
spring.resources.chain.gzipped=true
spring.resources.chain.html-application-cache=true
spring.resources.static-locations=classpath:/static/

js/css压缩, 组合, CDN就近访问

解决超卖
1. 数据库加商品id和用户id的唯一索引, 防止重复购买
2. sql加库存判断, 防止库存变成负数

核心思路是减少对数据库的访问
1. 系统初始化的时候, 就把库存信息和数量放在redis中

MiaoshaController实现InitializingBean接口, 实现其中的afterProperties方法, 在其中, 首先查到数据库中全部的秒杀商品, 然后遍历这个List, 把每个商品的库存数量都set到redis中.

2. 收到请求之后, redis要预减库存, 如果库存不足, 则直接返回, 就可以减少对数据库的访问, 否则才进行下一步

利用redis中的decr方法, 减少这个商品的库存数量
然后到数据库中查询用户是否已经秒杀过了

3. 把这个请求入队, 直接返回"排队中"

入队的就是用户和商品id

4. 请求出队, 生成订单, 减少库存

在队列的receiver中, 接受到MiaoshaMessage, 拿出用户和商品id, 然后生成订单, 减少库存

5. 客户端轮询, 查看是否秒杀成功

	private HashMap<Long, Boolean> localOverMap =  new HashMap<Long, Boolean>();

	/**
	 * 系统初始化
	 * */
	public void afterPropertiesSet() throws Exception {
		List<GoodsVo> goodsList = goodsService.listGoodsVo();
		if(goodsList == null) {
			return;
		}
		for(GoodsVo goods : goodsList) {
			redisService.set(GoodsKey.getMiaoshaGoodsStock, ""+goods.getId(), goods.getStockCount());
			localOverMap.put(goods.getId(), false);
		}
	}

	@RequestMapping(value="/do_miaosha", method=RequestMethod.POST)
    	@ResponseBody
    	public Result<Integer> miaosha(Model model,MiaoshaUser user,
    		@RequestParam("goodsId")long goodsId) {
	    	model.addAttribute("user", user);
	    	if(user == null) {
	    		return Result.error(CodeMsg.SESSION_ERROR);
	    	}
	    	//内存标记，减少redis访问
	    	boolean over = localOverMap.get(goodsId);
	    	if(over) {
	    		return Result.error(CodeMsg.MIAO_SHA_OVER);
	    	}
	    	//预减库存
	    	long stock = redisService.decr(GoodsKey.getMiaoshaGoodsStock, ""+goodsId);//10
	    	if(stock < 0) {
	    		 localOverMap.put(goodsId, true);
	    		return Result.error(CodeMsg.MIAO_SHA_OVER);
	    	}
	    	//判断是否已经秒杀到了
	    	MiaoshaOrder order = orderService.getMiaoshaOrderByUserIdGoodsId(user.getId(), goodsId);
	    	if(order != null) {
	    		return Result.error(CodeMsg.REPEATE_MIAOSHA);
	    	}
	    	//入队
	    	MiaoshaMessage mm = new MiaoshaMessage();
	    	mm.setUser(user);
	    	mm.setGoodsId(goodsId);
	    	sender.sendMiaoshaMessage(mm);
	    	return Result.success(0);//排队中
	}

	 /**
	   * orderId：成功
	   * -1：秒杀失败
	   * 0： 排队中
	   * */
	@RequestMapping(value="/result", method=RequestMethod.GET)
	@ResponseBody
	public Result<Long> miaoshaResult(Model model,MiaoshaUser user,
									@RequestParam("goodsId")long goodsId) {
		model.addAttribute("user", user);
		if(user == null) {
			return Result.error(CodeMsg.SESSION_ERROR);
		}
		long result  = miaoshaService.getMiaoshaResult(user.getId(), goodsId);
		return Result.success(result);
	}

	@Transactional
	public OrderInfo miaosha(MiaoshaUser user, GoodsVo goods) {
		//减库存 下订单 写入秒杀订单
		boolean success = goodsService.reduceStock(goods);
		if(success) {
			//order_info maiosha_order
			return orderService.createOrder(user, goods);
		}else {
			setGoodsOver(goods.getId());
			return null;
		}
	}

	public long getMiaoshaResult(Long userId, long goodsId) {
		MiaoshaOrder order = orderService.getMiaoshaOrderByUserIdGoodsId(userId, goodsId);
		if(order != null) {//秒杀成功
			return order.getOrderId();
		}else {
			boolean isOver = getGoodsOver(goodsId);
			if(isOver) {
				return -1;
			}else {
				return 0;
			}
		}
	}

	private void setGoodsOver(Long goodsId) {
		redisService.set(MiaoshaKey.isGoodsOver, ""+goodsId, true);
	}

	private boolean getGoodsOver(long goodsId) {
		return redisService.exists(MiaoshaKey.isGoodsOver, ""+goodsId);
	}

	function getMiaoshaResult(goodsId){
		g_showLoading();
		$.ajax({
			url:"/miaosha/result",
			type:"GET",
			data:{
				goodsId:$("#goodsId").val(),
			},
			success:function(data){
				if(data.code == 0){
					var result = data.data;
					if(result < 0){
						layer.msg("对不起，秒杀失败");
					}else if(result == 0){//继续轮询
						setTimeout(function(){
							getMiaoshaResult(goodsId);
						}, 50);
					}else{
						layer.confirm("恭喜你，秒杀成功！查看订单？", {btn:["确定","取消"]},
								function(){
									window.location.href="/order_detail.htm?orderId="+result;
								},
								function(){
									layer.closeAll();
								});
					}
				}else{
					layer.msg(data.msg);
				}
			},
			error:function(){
				layer.msg("客户端请求有误");
			}
		});
	}

	//展示loading
	function g_showLoading(){
		var idx = layer.msg('处理中...', {icon: 16,shade: [0.5, '#f5f5f5'],scrollbar: false,offset: '0px', time:100000}) ;
		return idx;
	}

	//salt
	var g_passsword_salt="1a2b3c4d"

整合rabbitmq
1.
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-amqp</artifactId>
	</dependency>

2. 配置
#rabbitmq
spring.rabbitmq.host=10.110.3.62
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
spring.rabbitmq.virtual-host=/
#消费者的数量
spring.rabbitmq.listener.simple.concurrency= 10
spring.rabbitmq.listener.simple.max-concurrency= 10
#每次取多少个队列中信息消费
spring.rabbitmq.listener.simple.prefetch= 1
#消费者自动启动
spring.rabbitmq.listener.simple.auto-startup=true
#如果消费失败, 信息会重新入队
spring.rabbitmq.listener.simple.default-requeue-rejected= true
#入队的重试信息
spring.rabbitmq.template.retry.enabled=true
spring.rabbitmq.template.retry.initial-interval=1000
spring.rabbitmq.template.retry.max-attempts=3
spring.rabbitmq.template.retry.max-interval=10000
spring.rabbitmq.template.retry.multiplier=1.0

3. 四种模式和配置.


upstream server_pool_miaosha {
	server localhost:9090 weight=1 max_fails=2 fail_timeout=30s;
	server otherserver:9090 weight=2 max_fails=2 fail_timeout=30s;
}

# 虚拟服务器
server {
	listen 	80;
	server_name localhost 10.110.3.62;

	location / {
		proxy_pass http://server_pool_miaosha;
	}
}

1. 秒杀接口地址隐藏

秒杀开始之前, 先去请求接口获取秒杀地址

在点击立即秒杀的按钮的时候, 触发一个js方法, getMiaoshaPath()
	function getMiaoshaPath(){
		var goodsId = $("#goodsId").val();
		g_showLoading();
		$.ajax({
			url:"/miaosha/path",
			type:"GET",
			data:{
				goodsId:goodsId,
				verifyCode:$("#verifyCode").val()
			},
			success:function(data){
				if(data.code == 0){
					var path = data.data;
					doMiaosha(path);
				}else{
					layer.msg(data.msg);
				}
			},
			error:function(){
				layer.msg("客户端请求有误");
			}
		});
	}

实际上就是前端请求这个接口, 然后后端返回一个随机字符串, 并存在redis中, 真正秒杀的时候, 需要带上这个随机字符串, 做验证

然后再执行秒杀, 并且把这个随机字符串放在秒杀的地址中, 进行验证.

2. 数学公式验证码(防并发, 每个人输入计算的速度不同; 防爬虫)

1. 添加生成验证码的接口, 在生成验证码的时候, 不是简单的生成数字, 而是生成数学表达式, 然后通过ScriptEngine引擎来计算结果, 并把结果存入redis中.
2. 秒杀进行中时, 才需要把验证码的值显示出来. 也就是请求服务端的vertifyCode接口, 获取到验证码
3. 然后在前端发起秒杀请求的时候, 携带输入的验证码参数, 点击秒杀, 来到服务端的获取秒杀地址的接口里.
4. 这里接口要对输入的验证码进行验证, 也就是从redis中拿到对应商品的验证码的值进行对比.

3. 接口限流防刷

利用缓存, redis中的有效期, 设置有效期为1分钟, 设置一分钟内最大的访问次数, 如果来访问, 则访问次数加1, 超过限制则返回失败

可以在方法上加注解, 然后用拦截器拿到注解中配置的值

response都要setContentType为(application/json;charset=UTF-8);