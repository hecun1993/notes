es: 分布式搜索引擎, 主要做站内搜索
mysql: 利用其事务特性做稳定的数据存储

根据实际的数据, 聚合在不同类的表中, 先有数据, 再设计表
减少中间表的设计
尽量不要用外键, 而是用逻辑上的外键. 否则将来数据庞大之后, 要进行分库分表, 外键就是一种束缚.

运行spring boot项目的maven命令: mvn spring-boot:run

主键产生策略通过GenerationType来指定。GenerationType是一个枚举，它定义了主键产生策略的类型。
1、AUTO　自动选择一个最适合底层数据库的主键生成策略。如MySQL会自动对应auto increment。这个是默认选项，即如果只写@GeneratedValue，等价于@GeneratedValue(strategy=GenerationType.AUTO)。
2、IDENTITY　表自增长字段，Oracle不支持这种方式。
3、SEQUENCE　通过序列产生主键，MySQL不支持这种方式。
4、TABLE　通过表产生主键，框架借由表模拟序列产生主键，使用该策略可以使应用更易于数据库移植。不同的JPA实现商生成的表名是不同的，如 OpenJPA生成openjpa_sequence_table表，Hibernate生成一个hibernate_sequences表，而TopLink则生成sequence表。这些表都具有一个序列名和对应值两个字段，如SEQ_NAME和SEQ_COUNT。

在我们的应用中，一般选用@GeneratedValue(strategy=GenerationType.AUTO)这种方式，自动选择主键生成策略，以适应不同的数据库移植。

@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private Long id;

JPA中用Long类型的id主键，其他属性可以加@Column注解，一一对应java名和sql名

在做单元测试的时候，可以把springboot默认生成的主类当成父类，其他单测都继承这个类即可

1. web包里放controller，dto，form
2. 异常拦截器包括两个部分，页面异常拦截器和Api异常拦截器

# 取消springboot的默认错误页面的显示, 而用我们自己的错误页面
server.error.whitelabel.enabled=false
# springboot热部署时, 取消对静态资源的监控
spring.devtools.restart.exclude=templates/**,static/**

使用H-ui来实现后台管理功能

使用es建立索引, 方便搜索数据的唯一标识, 而不是要搜数据的每一个字段, 但要在索引中加上house_id, 实际的数据是从mysql中查出的

以后的查询不用拼json字符串, 然后发送rest请求来操作es, 而是要建立一个和索引有关的类, 操作这个类即可

es适合做检索, mysql适合做原始数据的存储

Kafka构建索引: Kafka会把数据存在磁盘上.

zookeeper: 分布式配置和同步服务, kafka是通过zookeeper共享信息的

解压kafka后, 其自带zookeeper
nohup ./bin/zookeeper-server-start.sh config/zookeeper.properties &
vim nohup.out

server.properties中
broker.id 如果是一个集群, 则每个实例的broker.id是个唯一的值

启动kafka
nohup ./bin/kafka-server-start.sh config/server.properties & 

创建topic
./bin/kafka-topic.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic hello

展示所有topic
./bin/kafka-topic.sh --list --zookeeper localhost:2181

发送消息(命令行)
./bin/kafka-console-producer.sh --broker-list localhost:9092 --topic hello

接受消息
./bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic hello --from-beginning

房屋上架等情况下, 需要构建索引, 需要把它变成异步的服务, 也就是用kafka这样的消息队列, 做一些耗时的任务

