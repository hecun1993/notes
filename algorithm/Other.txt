## 排序算法
插入排序: n^2 	原地排序 	o(1) 	稳定排序
归并排序: nlogn 非原地排序	o(n)	稳定排序
快速排序: nlogn	原地排序	o(logn)	非稳定排序
堆排序:   nlogn	原地排序	o(1)	非稳定排序

> 稳定排序：对于相等的元素，在排序后，原来靠前的元素依然靠前。"相等元素的相对位置没有发生改变"

在基本有序的情况下，快排最慢，堆排最快。
快排每一趟就是O（n），在一般情况下递归深度是log（n），所以总的复杂度是O(nlogn)。在有序的情况下，递归深度变成了n，所以总复杂度会退化到O(n*n)

堆排序：需要先构造大顶堆（每个节点的值都不小于自己左右子节点的完全二叉树）
每轮会输出堆顶元素，然后以堆中的最后一个元素代替，再将新的顶点元素不断与其子节点中大于该元素的较大者交换。直到该元素大于其左右两个子节点，或成为叶子节点。


**优先队列：出队顺序和入队顺序无关，和优先级有关**

## 二叉树
#### 先序遍历：都是对根节点所处的位置来说的。
* 前序遍历，根左右
* 中序遍历，左根右
* 后序遍历，左右根

#### 层序遍历(广度优先遍历)：需要队列
* 首先把root推进队列,之后进行循环,只要队列不为空,则把这个元素pop出去,相当于遍历到了这个元素.
* 接着,把这个元素的左右两个孩子分别入队.
* 接着,把左孩子pop出去,再把左孩子的左右两个孩子分别入队.
* 以此类推.

#### 度
**度是二叉树分支的数目，是连接节点和节点的线。有n个节点，就有n-1个度，节点数总是比度要多一个。没有分叉的二叉树节点的度就是0度。如果一个节点只有一个分叉就是1度。两个分叉就是2度的子树。**

**度为0的节点数为度为2的节点数加1，即n0 = n2 + 1**。可以根据二叉树中，度的数量和节点的数量守恒来证明。

二叉树的任意节点最多拥有两个子节点。二叉搜索树（二叉排序树）不仅包含二叉树的特点，更重要的是二叉搜索树是有序的。**它左子树上的所有节点的值均小于根节点的值，而右子树上所有节点的值均大于根节点的值（当然前提是左右子树不为空）。**


广度遍历用队列，深度遍历用栈

#### 计算出n阶乘中尾部零的个数
```java
public long trailingZeros(long n) {
    int sum = 0;
    while(n != 0){
        n /= 5;
        sum += n;
    }
    return sum;
}
```
> 1. 很容易想到2*5即可得到0，则N!可以表示为k*（2^m）*（5^n），由于在N！中m>>n，因此N!=k*(2*5)^n，即n为尾部为0的个数。
> 2. 由此，我们只要考虑N!中包含多少个5的倍数就可以了，如25，含有5,10,15,20,25，包含6个5的倍数，即25！尾部有6个0。
> 3. n=N/5+N/(5^2)+N/(5^3)....+N/(5^k) (k<=N/5)

#### 不用加号实现两个数相加
```java
public class Demo19 {
    //不用加减法实现加法，类似数字电路中的全加器，异或求得部分和，相与求得进位，最后将进位作为加法器的输入，典型的递归实现思路。
    public int aplusb(int a, int b){
        int result = a ^ b;
        int carry = a & b;
        carry <<= 1;
        if (carry != 0) {
            result = aplusb(result, carry);
        }
        return result;
    }
}
```

#### 判断括号是否成对
```java
public class Demo14 {
    public static void check(String s){
        Stack<Character> sc = new Stack<>();
        char[] c = s.toCharArray();

        for (int i = 0; i < c.length; i++){
            if (c[i] == '(' || c[i] == '[' || c[i] == '{'){
                sc.push(c[i]);
            } else if (c[i] == ')'){
                if (sc.peek() == '('){
                    sc.pop();
                }
            } else if (c[i] == '['){
                if (sc.peek() == ']'){
                    sc.pop();
                }
            } else if (c[i] == '}'){
                if (sc.peek() == '}'){
                    sc.pop();
                }
            }
        }

        if (sc.empty()){
            System.out.println("成对");
        } else {
            System.out.println("不成对");
        }
    }
}
```

#### 输出斐波那契数列第n项
```java
public class Demo07 {
    public int Fibonacci(int n){
        int target = 0;
        if (n == 0 || n == 1){
            return 0;
        }
        int one = 0;
        int two = 1;
        for (int i = 2; i <= n; i++){
            target = one + two;
            one = two;
            two = target;
        }
        return target;
    }
}
```

#### 青蛙跳台阶（一）
```java
/**
 * 8.
 * 一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。
 */
public class Demo08 {
    public int jumpFloor01(int target){
        if (target == 0){
            return 0;
        }
        if (target == 1){
            return 1;
        }
        if (target == 2){
            return 2;
        }
        return jumpFloor01(target - 1) + jumpFloor01(target - 2);
    }

    //本来就是菲波那切数列问题，可以用节省空间的算法
    public int jumpFloor02(int number) {
        int t1 = 1;
        int t2 = 2;
        int total = 0;
        if (number == 1 || number == 2){
            return number;
        }
        for (int i = 3; i <= number; i++){
            total = t1 + t2;
            t1 = t2;
            t2 = total;
        }
        return total;
    }
}
```

#### 青蛙跳台阶（二）
```java
/**
 * 9.
 * 一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。
 *
 * 因为n级台阶，第一步有n种跳法：跳1级、跳2级、到跳n级
 * 跳1级，剩下n-1级，则剩下跳法是f(n-1)
 * 跳2级，剩下n-2级，则剩下跳法是f(n-2)
 * 所以f(n)=f(n-1)+f(n-2)+...+f(1)
 * 因为f(n-1)=f(n-2)+f(n-3)+...+f(1)
 * 所以f(n)=2*f(n-1)
 */
public class Demo09 {
    public int jumpFloor2(int target){
        if (target < 0){
            return -1;
        } else if (target == 1){
            return 1;
        } else {
            return 2 * jumpFloor2(target - 1);
        }
    }
}
```

#### 斐波那契构造矩形
```java
/**
 * 10.
 * 我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？
 *
 * 依旧是斐波那契数列
 * 2*n的大矩形，和n个2*1的小矩形
 * 其中target*2为大矩阵的大小
 * 第一块小矩形如果横着摆，则下面的空间只能横着摆，所以问题规模会变成target - 2
 * 第一块小矩形如果竖着摆，则后面的空间可以任意摆放，所以问题规模会变成target - 1
 */
public class Demo10 {
    public int RectCover(int target) {
        if (target <= 1){
            return 1;
        }
        if (2 * target == 2){
            return 1;
        }
        if (2 * target == 4){
            return 2;
        }
        return RectCover(target - 1) + RectCover(target - 2);
    }
}
```

public class MaxSubSum3 {  
      
    private static int max3(int a,int b,int c){  
        int temp = Math.max(a, b);  
        return Math.max(temp, c);  
    }  
      
    private static int maxSumRec(int[] array,int left,int right){  
        if (left == right)  
            return array[left] > 0 ? array[left] : 0;  
        //二分  
        int center = (left+right)>>1;//右移位一次，为除法的除以2，但是效率比较高  
        int maxLeftSum = maxSumRec(array,left,center);  
        int maxRightSum = maxSumRec(array,center+1,right);  
  
        int maxLeftBorderSum = 0, curLeftBorderSum = 0;  
        for(int i = center;i >= left; i--){  
            curLeftBorderSum += array[i] ;  
            if(curLeftBorderSum > maxLeftBorderSum)  
                maxLeftBorderSum = curLeftBorderSum;  
        }  
        int maxRightBorderSum = 0, curRightBorderSum = 0;  
        for(int i = center+1; i <= right;i++){  
            curRightBorderSum += array[i];  
            if(curRightBorderSum > maxRightBorderSum)  
                maxRightBorderSum = curRightBorderSum;  
        }  
          
        return max3(maxLeftSum,maxRightSum,maxRightBorderSum+maxLeftBorderSum);  
    }  
      
    public static int maxSum(int[] array){  
        return maxSumRec(array,0,array.length-1);  
    }  


找出两个链表的公共节点:
    public ListNode FindFirstCommonNode(ListNode pHead1, ListNode pHead2) {
        if (pHead1 == pHead2) {
            return pHead1;
        }

        int l1 = getLength(pHead1);
        int l2 = getLength(pHead2);
        if (l1 > l2) {
            for (int i = 0; i < (l1 - l2); i++) {
                pHead1 = pHead1.next;
            }

        } else {
            for (int i = 0; i < (l1 - l2); i++) {
                pHead2 = pHead2.next;
            }
        }

        boolean f = true;
        ListNode p = null;
        while (f) {
            if (pHead1 == null || pHead2 == null) {
                return null;
            }
            if (pHead1 == pHead2) {
                p = pHead1;
                f = false;
            } else {
                pHead1 = pHead1.next;
                pHead2 = pHead2.next;
            }

        }
        return p;
    }

    public static int getLength(ListNode pHead) {
        int length = 0;

        ListNode current = pHead;
        while (current != null) {
            length++;
            current = current.next;
        }
        return length;
    } 

给一个数组和一个target, 求所有和为target的数组组合
	private List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> lList = new ArrayList<>();  // 最终的结果集
        if (candidates == null || candidates.length < 1 || target < 1) {
            return lList;
        }

        Arrays.sort(candidates);  // 排序，使得不用对相同的结果集计算多次
        List<Integer> list = new ArrayList<>();  // 临时结果保存

        combinationSumCore(candidates, list, target, 0, lList);  // 核心函数
        return lList;
    }

    private void combinationSumCore(int[] candidates, List<Integer> list, int target, int index, List<List<Integer>> lList) {
        for (int i = index; i < candidates.length; i++) {
            if (candidates[i] == target)  // 等于，就加入结果集
            {
                List<Integer> result = new ArrayList<>();
                result.addAll(list);
                result.add(candidates[i]);
                lList.add(result);
            } else if (candidates[i] < target)  // 小于，就继续递归
            {
                List<Integer> result = new ArrayList<>();
                result.addAll(list);
                result.add(candidates[i]);
                combinationSumCore(candidates, result, target - candidates[i], i, lList);  // 这边i值不变，是因为当前值可以使用多次
            } else  // 大于，则后面的数字都大于，因此不可能出现在结果集中
            {
                break;
            }
        }
    }

找到链表的中间节点:
	private static void findMid(ListNode head) {  
        ListNode slow = head;  
        ListNode fast = head;  
        while(fast.next != null){  
            if(fast.next.next != null){  
                fast = fast.next.next;  
                slow = slow.next;  
            } else {  
                slow = slow.next;  
            }  
              
        }
        System.out.println(slow.val);  
    } 


你有 25 匹马，需要多少场比赛才能找出跑得最快的 3 匹马？你没有秒表，每场比赛只能同时让 5 匹马参赛。

	第一轮，把 25 匹马分为 5 组，每组里的马只跑一次，只跟同组的马匹竞争。一轮比赛结果大概会是这样：
	第一名：「奔腾」
	第二名：「北舞」
	第三名：「凯速」
	第四名：「上将」
	第五名：「跳影」
	你无法断定「奔腾」是 25 匹马里跑得最快的，甚至无法担保它能排进前三名。举个极端情况下的相反例子：其他 4 场比赛中跑得最慢的马，也可能比「奔腾」跑得快，因为它的速度可能在 25 匹马里排第 21 名。
	那么，从这场比赛里我们是否了解到什么东西呢？当然了。我们了解到这 5 匹马的排名情况。我们还了解到，「上将」和「跳影」可以排除在外了。既然它们在这一轮比赛里排不进前三，那么在所有的 25 匹马里，它们同样不可能排进前三。。这个道理，也适用于其他轮比赛里的第 4 名和第 5 名。每一轮比赛可以排除掉两匹马。在第一轮的 5 场比赛中，我们可以刷掉 10 匹马，留下 15 匹马竞争前三名。
	第二轮，即第 6 场比赛，要测试在最初 5 场比赛中表现出色者。合理的方案是让 5 匹上一轮比赛的「第一名」对战。就这么做吧！让「奔腾」和其他 4 场比赛的第一名跑一回。结果可能会是这样：
	第一名：「易歌尔」
	第二名：「奔腾」
	第三名：「终结者」
	第四名：「红朗姆」
	第五名：「菲尔拉普」
	这一次，我们又可以排除两匹马，「红朗姆」和「菲尔拉普」。从这一次的比赛结果看，它们不可能是 25 匹马里的前三名。我们还了解到，「易歌尔」是所有马里跑得最快的！如果问题问的只是 25 匹马里跑得最快的是谁，那么答案就是「易歌尔」。
	可我们要的是前三名。我们不光可以排除掉「红朗姆」和「菲尔拉普」，还可以排除掉第一轮比赛中所有败给它们的马。败给它们的马跑得更慢，而我们又已经知道「红朗姆」和「菲尔拉普」进不了前三了。
	接下来是「奔腾」。从这场最新的比赛结果来看，它有可能是所有马里跑得第二快的。但以下可能性仍然存在：第一场比赛排在「奔腾」之后的「北舞」，是所有马里跑得第三快的。那么，最终排名就是「易歌尔」、「奔腾」和「北舞」。第一场比赛中排第三的「凯速」，现在出局了。
	「易歌儿」第一次比赛时排在它后头的第二名和第三名，仍在候选之列。这两匹马的速度完全有可能比「奔腾」快，因为它们并没有比试过。
	总之，现在候选名单里还有 6 匹马。它们是：本场比赛的前三名；与本场比赛第一名在第一场比赛中获第二、第三名的两匹马；在第一场比赛中仅次于本场比赛第二名的一匹马。
	我们已经知道「易歌儿」是跑得最快的马，因此，让它参赛没有任何意义了，于是就只剩下 5 匹马。自然，第三轮，我们会让这 5 匹马进行第 7 场，也是最后一场比赛。第 7 场比赛的前两匹马就是所有 25 匹马中跑得第二快和第三快的。
	总结一下
		先进行 5 场资格赛；之后让资格赛的第一名们进行冠军争夺赛，本场比赛的获胜者就是所有马里速度最快的；再对逻辑上仍有资格的 5 匹马进行最后一场比赛。这次比赛里的前两名，就是 25 匹马里跑第二和第三快的。

0 到 9999 这 1 万个数中有多少个数字 7
	总共有四位数，每位数的可能分别有10种（0～9）。

	现在假设个位固定为7，则个位数是7的数字个数为有10 * 10 * 10 = 1000种。
	就是说数字7在个位出现的次数为1000。（这里很重要，不然可能会考虑错）

	以此类推，数字7在十位、百位、千位出现的次数也是1000。
	故答案为 4 * 1000 = 4000

在m个数中找出最小的n个数
	快速排序
	/**
	 * 思路二 
	 * 把整个数组分为k和n-k 2部分,找出最小的K个数的过程其实就是把最大的数放到n-k部分的过程,每次比较都把最大的数交换到n-k的部分里面。
	 * 1.把最先遍历到的k个数赋值到大小为k的数组2中 
	 * 2.在数组2中找出最大元素max,时间复杂度是o(k),因为如果
	 * 3.在数组1中遍历剩下的n-k个数,和max比较,如果小于max则交换位置,重复2的过程 o(k)+(n-k)o(k)=n*o(k)
	 **/
	public static void scheme1(int[] ins, int k) {
		int[] ks = new int[k];
		// 最先遍历的k个数放入数组中 o(k)
		for (int i = 0; i < k; i++) {
			ks[i] = ins[i];
		}
		for (int i = k; i < ins.length; i++) {
			if (getMax(ks) > ins[i]) {
				ks[0] = ins[i];
			}
		}
		// 输出最小的K个数
		for (int i = 0; i < k; i++) {
			System.out.print(ks[i] + " ");
		}
	}
		public static int getMax(int[] arr) {
		// 选择一个基数,分别于数组中其他元素比较,始终保持基数对应的指针是最大值
		int radix = 0;
		for (int i = 0; i < arr.length; i++) {
			// 如果sub小于旁边值则交互位置
			if (arr[radix] < arr[i]) {
				int temp = arr[radix];
				arr[radix] = arr[i];
				arr[i] = temp;
			}
		}
		return arr[radix];
	}

原地实现数组反转:
	public static void main(String[] args) {  
	    String[] num = {"1", "2", "3", "4", "5", "6"};  

	    for (int i = 0; i <= num.length / 2 - 1; i++) {  
	        String temp1 = num[i];  
	        String temp2 = num[num.length - i - 1];  
	        num[i] = temp2;  
	        num[num.length - i - 1] = temp1;  
	    }  
	    System.out.println(Arrays.asList(num).toString());  
	}  

字符串去重:
	public static String removerepeatedchar(String s) {  
        if (s == null)  
            return s;  
  
        StringBuffer sb = new StringBuffer();  
        int i = 0, len = s.length();  
        while (i < len) {  
            char c = s.charAt(i);  
            sb.append(c);  
            i++;  
            while (i < len && s.charAt(i) == c) { //这个是如果这两个值相等，就让i+1取下一个元素  
                i++;  
            }  
        }  
        return sb.toString();  
    }  

字符串的全排列:
public class RecursionTree {

    public static void permutation(char[] s,int from,int to) {
        if(to <= 1)
            return;
        if(from == to) {
            System.out.println(s);
        } else {
            for(int i=from; i<=to; i++) {
                swap(s,i,from); //交换前缀，使其产生下一个前缀
                permutation(s, from+1, to);
                swap(s,from,i); //将前缀换回，继续做上一个前缀的排列
            }
        }
    }

    public static void swap(char[] s,int i,int j) {
        char tmp = s[i];
        s[i] = s[j];
        s[j] = tmp;
    }

    public static void main(String[] args) {
        char[] s = {'a','b','c'};
        permutation(s, 0, 2);
    }

}

		