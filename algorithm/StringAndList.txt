//找出字符串中只出现一次的字符
public class Demo23 {
    private static char findFirstOnceChar(String charString) {
        //abcdhuiasab
        char[] chars = charString.toCharArray();
        int[] arr = new int[256];

        for (int i = 0; i < arr.length; i++){
            arr[chars[i]] += 1;
        }

        for (int i = 0; i < chars.length; i++){
            if (arr[chars[i]] == 1){
                return chars[i];
            }
        }
        return ' ';
    }
}
```

#### 计算数字k在0到n中的出现的次数，k可能是0~9的一个值
```java
public class Demo20 {
    public int digitCounts(int k, int n){
        int count = 0;
        char kChar = (char)(k + '0');
        for (int i = k; i <= n; i++) {
            char[] iChars = Integer.toString(i).toCharArray();
            for(char iChar : iChars){
                if (kChar == iChar) {
                    count ++;
                }
            }
        }
        return count;
    }
}
```
> 例如n=12，k=1，在 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]，我们发现1出现了5次 (1, 10, 11, 12)

#### 链表相加
```java
public class Demo18 {
    public class ListNode{
        int val;
        ListNode next;
        ListNode(int val){
            this.val = val;
        }
    }

    public ListNode addTwoNumbers(ListNode l1, ListNode l2){
        ListNode dummy = new ListNode(0);
        ListNode curr = dummy;
        int carry = 0; //进位

        while(l1 != null || l2 != null || carry != 0){
            int l1_val = (l1 != null) ? l1.val : 0;
            int l2_val = (l2 != null) ? l2.val : 0;
            int sum = l1_val + l2_val + carry;

            //update carry
            carry = sum / 10;
            curr.next = new ListNode(sum % 10);

            curr = curr.next;
            if (l1 != null) {
                l1 = l1.next;
            }
            if (l2 != null) {
                l2 = l2.next;
            }
        }

        return dummy.next;
    }
}
```

#### 无重复字符串的最长子串
```java
public class Demo17 {
    public int lengthOfLongestSubstring(String s) {
        // write your code here
        if(s.length()==0){
            return 0;
        }
        int maxLength=1;
        List<Character> list=new ArrayList<Character>();
        list.add(s.charAt(0));
        for(int i=1;i<s.length();i++){
            if(list.contains(s.charAt(i))){
                int index=list.indexOf(s.charAt(i));
                list=list.subList(index+1, list.size());
                list.add(s.charAt(i));
                maxLength=Math.max(maxLength, list.size());
            }else{
                list.add(s.charAt(i));
                maxLength=Math.max(maxLength, list.size());
            }
        }
        return maxLength;
    }
}
```

#### 链表反转
```java
public class Demo16 {
    //===反转单链表===
    class ListNode{
        int val;
        ListNode next;
        public ListNode(int val){
            this.val = val;
        }
    }

    //iterative method
    private ListNode reverse01(ListNode head){
        if (head == null || head.next == null){
            return head;
        }
        //当前节点是head，pre为当前节点的前一节点，next为当前节点的下一节点
        ListNode prev = null;
        while (head != null){
            //先用next保存head的下一个节点的信息，保证单链表不会因为失去head节点的原next节点而就此断裂
            ListNode next = head.next;
            //保存完next，就可以让head从指向next变成指向pre了
            head.next = prev;
            //让pre，head，next依次向后移动一个节点，继续下一次的指针反转
            prev = head;
            head = next;
        }
        //如果head为null的时候，prev就为最后一个节点了，但是链表已经反转完毕，prev就是反转后链表的第一个节点
        //直接输出prev就是我们想要得到的反转后的链表
        return prev;
    }

    //recursive method
    private ListNode reverse02(ListNode head){
        if (head == null || head.next == null){
            return head;
        }

        ListNode next = head.next;
        //先反转后续节点
        ListNode newHead = reverse02(next);
        //将当前结点的指针域指向前一结点
        next.next = head;
        //前一结点的指针域令为null;
        head.next = null;

        //返回反转后新链表的头结点
        return newHead;
    }
    //==========

    //===反转双向链表===
    class DListNode{
        int val;
        DListNode prev, next;
        public DListNode(int val){
            this.val = val;
            this.next = this.prev = null;
        }
    }

    public DListNode reverse(DListNode head){
        DListNode curr = null;

        while (head != null){
            curr = head;
            head = curr.next;
            curr.next = curr.prev;
            curr.prev = head;
        }

        return curr;
    }
}
```

#### 找出单链表中倒数第k个元素
```java
public class Demo11 {
    class Node{
        Node next = null;
        int data;
        public Node(int data){
            this.data = data;
        }
    }

    Node head = null;

    public Node findElem(int k, Node head){
        if (k <= 0 || head == null){
            return null;
        }

        Node p1 = head;
        Node p2 = head;

        for (int i = 0; i < k; i++){
            if (p1.next != null){
                p1 = p1.next;
            } else {
                return null;
            }
        }

        while (p1 != null){
            p1 = p1.next;
            p2 = p2.next;
        }

        return p2;
    }
}
```
> 1、为了找出倒数第k个元素，最容易想到的办法是首先遍历一遍单链表，求出整个单链表的长度n，然后将倒数第k个，转换为正数第n-k个，接下来遍历一次就可以得到结果。但是该方法存在一个问题，即需要对链表进行两次遍历，第一次遍历用于求解单链表的长度，第二次遍历用于查找正数第n-k个元素。

> 2、显然，这种方法还可以进行优化。于是想到了第二种方法，如果从头至尾的方向从链表中的某个元素开始，遍历k个元素后刚好达到链表尾，那么该元素就是要找到的倒数第k个元素，根据这一性质，可以设计如下算法：从头节点开始，依次对链表的每一个节点元素进行这样的测试，遍历k个元素，查看是否到达链表尾，只到找到哪个倒数第k个元素。此种方法将对同一批元素进行反复多次的遍历，对于链表中的大部分元素而言，都要遍历K个元素，如果链表长度为n个的话，该算法的时间复杂度为O(kn)级，效率太低。

>  3、存在另外一个更高效的方式，只需要一次遍历即可查找到倒数第k个元素。由于单链表只能从头到尾依次访问链表的各个节点，因此，如果要找到链表的倒数第k个元素的话，也只能从头到尾进行遍历查找，在查找过程中，设置两个指针，让其中一个指针比另一个指针先前移k-1步，然后两个指针同时往前移动。循环直到线性的指针值为NULL时，另一个指针所指向的位置就是所要找到的位置。

#### 在二维数组中寻找元素
```java
/**
 * 1.
 * 在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。
 * 请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。
 *
 * 利用二维数组，从上到下，从左到右依次递增
 * 选取右上角的元素a[row][col]与target进行比较
 * 如果target小，则target元素肯定在a的左边 col--
 * 如果target大，则target元素肯定在a的下边 row++
 */
public class Demo01 {
    public boolean find(int[][] arr, int target){
        //找到右上角的元素
        int row = 0;
        int col = arr[0].length - 1;

        //循环的条件
        while (row <= arr.length - 1 && col >= 0){
            if (target == arr[row][col]){
                return true;
            } else if (target < arr[row][col]){
                col--;
            } else {
                row++;
            }
        }

        return false;
    }
}
```

#### 替换字符串的空格
```java
/**
 * 2.
 * 请实现一个函数，将一个字符串中的空格替换成“%20”。
 * 例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。
 */
public class Demo02 {
    public String replaceSpace(StringBuffer str) {
        String str1 = str.toString();
        char[] strChar = str1.toCharArray();
        StringBuffer str2 = new StringBuffer();

        for (int i = 0; i < strChar.length; i++){
            if (strChar[i] == ' '){
                str2.append("%20");
            } else {
                str2.append(strChar[i]);
            }
        }

        return str2.toString();
    }
}
```

#### 输入链表，从尾到头打印值
```java
/**
 * 3.
 * 输入一个链表，从尾到头打印链表每个节点的值。
 *
 * 1.借助栈结构，先进后出
 * 2.借助递归
 */
public class Demo03 {
    class ListNode{
        int val;
        ListNode next = null;

        public ListNode(int val){
            this.val = val;
        }
    }

    //1.借助栈结构，先进后出
    public ArrayList<Integer> printListFromTailToHead01(ListNode listNode){
        //先全部进栈
        Stack<Integer> stack = new Stack<>();
        while (listNode != null){
            stack.push(listNode.val);
            listNode = listNode.next;
        }

        ArrayList<Integer> arrayList = new ArrayList<>();
        //出栈
        while (!stack.isEmpty()){
            arrayList.add(stack.pop());
        }

        return arrayList;
    }

    //2.递归
    public ArrayList<Integer> printListFromTailToHead02(ListNode listNode) {
        ArrayList<Integer> list = new ArrayList<>();
        if (listNode == null){
            return list;
        }

        get(listNode, list);
        return list;
    }

    private void get(ListNode listNode, ArrayList<Integer> list){
        if (listNode.next == null){
            list.add(listNode.val);
            return;
        }

        get(listNode.next, list);
        list.add(listNode.val);
    }
}
```

#### Two Sum
```java
/**
 * 一个有序数组和一个整数，在其中寻找两个元素，使其和为target
 * 返回这两个数的索引
 */
public class _167_Two_Sum_II {
    public int[] twoSum(int[] nums, int target){
        if(nums == null || nums.length == 0){
            return null;
        }
        //定义一个HashMap用来存储
        Map<Integer, Integer> hashmap = new HashMap();
        int index1 = 0, index2 = 0;
        for(int i = 0; i < nums.length; i++){
            if(hashmap.containsKey(target - nums[i])){
                index1 = hashmap.get(target - nums[i]);
                index2 = i;
                return new int[]{index1, index2};
            } else {
                hashmap.put(nums[i], i);
            }
        }
        return null;
    }
}
```

#### Three Sum
```java
/**
 返回值是[[-1, 0, 1],[-1, -1, 2]]
     S = {-1 0 1 2 -1 -4}
     排序后：
     S = {-4 -1 -1 0 1 2}
     ↑  ↑        ↑
     i  j        k
     →        ←
     i每轮只走一步，j和k根据S[i]+S[j]+S[k]=ans和0的关系进行移动，且j只向后走（即S[j]只增大），k只向前走（即S[k]只减小）
     如果ans>0说明S[k]过大，k向前移；如果ans<0说明S[j]过小，j向后移；ans==0即为所求。

 * Created by hecun on 2017/7/12.
 */
public class _ThreeSum {
    public List<List<Integer>> threeSum(int[] nums, int target){
        if (nums == null || nums.length < 3) {
            return null;
        }
        //构造返回结果的列表
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        //先排序！
        Arrays.sort(nums);

        for (int i = 0; i < nums.length - 2; i++) {
            if (i > 0 && (nums[i] == nums[i - 1])) {
                continue;
            }
            int left = i + 1;
            int right = nums.length - 1;
            while(left < right){
                int tmp = nums[left] + nums[right];
                if (tmp + nums[i] == target) {
                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));
                    left ++;
                    while(left < right && nums[left] == nums[left - 1]){
                        left ++;
                    }
                } else if (tmp + nums[i] < target) {
                    left ++;
                } else {
                    right --;
                }
            }
        }
        return result;
    }
}
```

#### 反转字符串
```java
/**
 * 反转字符串
 */
public class _344_Reverse_String {
    private static String reverseString(String s){
        char[] word = s.toCharArray();
        int i = 0;
        int j = s.length() - 1;

        while (i < j){
            char temp = word[i];
            word[i] = word[j];
            word[j] = temp;
            i++;
            j--;
        }

        return new String(word);
    }
}
```

#### 判断链表中是否有环
```java
/**
 * 给定一个链表，判断它是否有环。
 *
 * 链表中的快慢指针
 */
public class _141_Linked_List_Cycle {
    class ListNode{
        int val;
        ListNode next;
        public ListNode(int val){
            this.val = val;
        }
    }

    public boolean hasCycle(ListNode head){
        if (head == null || head.next == null){
            return false;
        }

        ListNode fast = head;
        ListNode slow = head;

        while (fast.next != null && fast.next.next != null){
            slow = slow.next;
            fast = fast.next.next;
            if (fast == slow){
                return true;
            }
        }

        return false;
    }
}
```

